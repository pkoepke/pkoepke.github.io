{"version":3,"sources":["webpack://FFmpegWASM/webpack/universalModuleDefinition","webpack://FFmpegWASM/webpack/bootstrap","webpack://FFmpegWASM/webpack/runtime/define property getters","webpack://FFmpegWASM/webpack/runtime/get javascript chunk filename","webpack://FFmpegWASM/webpack/runtime/global","webpack://FFmpegWASM/webpack/runtime/hasOwnProperty shorthand","webpack://FFmpegWASM/webpack/runtime/make namespace object","webpack://FFmpegWASM/webpack/runtime/publicPath","webpack://FFmpegWASM/webpack/runtime/jsonp chunk loading","webpack://FFmpegWASM/dist/esm/const.js","webpack://FFmpegWASM/dist/esm/utils.js","webpack://FFmpegWASM/dist/esm/errors.js","webpack://FFmpegWASM/dist/esm/classes.js","webpack://FFmpegWASM/dist/esm/types.js","node_modules/@ffmpeg/util/dist/cjs/errors.js","node_modules/@ffmpeg/util/dist/cjs/const.js","node_modules/@ffmpeg/util/dist/cjs/index.js","script.js","../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","chunkId","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","href","FFMessageType","getMessageID","messageID","ERROR_NOT_LOADED","ERROR_TERMINATED","FFmpeg","loaded","onmessage","data","id","type","LOAD","MOUNT","UNMOUNT","EXEC","FFPROBE","WRITE_FILE","READ_FILE","DELETE_FILE","RENAME","CREATE_DIR","LIST_DIR","DELETE_DIR","LOG","forEach","f","PROGRESS","ERROR","trans","signal","Promise","resolve","reject","postMessage","addEventListener","DOMException","once","classWorkerURL","config","Worker","URL","undefined","args","timeout","ids","keys","terminate","path","Uint8Array","push","buffer","fsType","options","mountPoint","encoding","oldPath","newPath","on","event","callback","off","filter","load","FFFSType","ERROR_INCOMPLETED_DOWNLOAD","ERROR_RESPONSE_BODY_READER","HeaderContentLength","_typeof","iterator","constructor","_regeneratorRuntime","t","n","a","c","asyncIterator","u","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","__awaiter","thisArg","_arguments","P","generator","adopt","fulfilled","step","rejected","result","apply","toBlobURL","downloadWithProgress","importScript","fetchFile","errors_js_1","require","const_js_1","readFromBlobOrFile","blob","fileReader","FileReader","onload","ArrayBuffer","onerror","_a","_b","concat","target","error","code","readAsArrayBuffer","file","_callee","_callee$","_context","test","atob","split","map","charCodeAt","fetch","arrayBuffer","File","Blob","url","_callee2","_callee2$","_context2","script","createElement","eventHandler","removeEventListener","appendChild","cb","_callee3","resp","buf","total","reader","chunks","received","_yield$reader$read","delta","position","_i","_chunks","chunk","_callee3$","_context3","parseInt","headers","body","getReader","read","set","t0","console","log","byteLength","mimeType","progress","arguments","_callee4","_callee4$","_context4","createObjectURL","_ffmpeg","_util","asyncGeneratorStep","_asyncToGenerator","_next","_throw","ffmpeg","_ref","time","getElementById","textContent","toFixed","transcode","_ref2","baseURL","outputFileType","imgTag","sourceTag","videoTag","t1","t2","t3","coreURL","wasmURL","files","firstChild","replaceWith","t4","t5","t6","writeFile","Date","toLocaleTimeString","exec","readFile","classList","add","setAttribute","createFileFromUrl","_x","_x2","_x3","_createFileFromUrl","filename","response","processFetchedFile","_processFetchedFile","fileUrl","fileName","fileMimeType","myFile","handleInput","click","OVERLAY_ID","OldModule","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","remove","stackTrace","innerText","innerHTML","getParents","modules","parents","k","dep","Array","isArray","deps","cached","cache","some"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FFmpegWASM\"] = factory();\n\telse\n\t\troot[\"FFmpegWASM\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".ffmpeg.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.9\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.FFPROBE:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n","export var FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_INCOMPLETED_DOWNLOAD = exports.ERROR_RESPONSE_BODY_READER = void 0;\nexports.ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexports.ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderContentLength = void 0;\nexports.HeaderContentLength = \"Content-Length\";\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBlobURL = exports.downloadWithProgress = exports.importScript = exports.fetchFile = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nconst const_js_1 = require(\"./const.js\");\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        var _a, _b;\n        reject(Error(`File could not be read! Code=${((_b = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.code) || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nconst fetchFile = (file) => __awaiter(void 0, void 0, void 0, function* () {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = yield (yield fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = yield (yield fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = yield readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n});\nexports.fetchFile = fetchFile;\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nconst importScript = (url) => __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve) => {\n        const script = document.createElement(\"script\");\n        const eventHandler = () => {\n            script.removeEventListener(\"load\", eventHandler);\n            resolve();\n        };\n        script.src = url;\n        script.type = \"text/javascript\";\n        script.addEventListener(\"load\", eventHandler);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    });\n});\nexports.importScript = importScript;\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nconst downloadWithProgress = (url, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const resp = yield fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(const_js_1.HeaderContentLength) || \"-1\");\n        const reader = (_a = resp.body) === null || _a === void 0 ? void 0 : _a.getReader();\n        if (!reader)\n            throw errors_js_1.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = yield reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw errors_js_1.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = yield resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n});\nexports.downloadWithProgress = downloadWithProgress;\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nconst toBlobURL = (url, mimeType, progress = false, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    const buf = progress\n        ? yield (0, exports.downloadWithProgress)(url, cb)\n        : yield (yield fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n});\nexports.toBlobURL = toBlobURL;\n","// From the actual documentation\r\nimport { FFmpeg } from '@ffmpeg/ffmpeg';\r\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\r\n\r\nffmpeg = new FFmpeg();\r\n//ffmpeg.on(\"log\", ({ message }) => { console.log(message); }); // If ffmpeg calls its log method, log that to the console.\r\nffmpeg.on(\"progress\", ({ progress, time }) => { document.getElementById('progress').textContent = `${(progress * 100).toFixed(2)} %, time: ${(time / 1000000).toFixed(2)} s`; }); // Show progress on the page.\r\n\r\nconst transcode = async () => {\r\n  /*  const baseURL = './';\r\n    await ffmpeg.load({\r\n      coreURL: await toBlobURL(`${baseURL}ffmpeg-core.js`, 'text/javascript'),\r\n      wasmURL: await toBlobURL(`${baseURL}ffmpeg-core.wasm`, 'application/wasm')\r\n    });*/\r\n\r\n  const baseURL = 'https://unpkg.com/@ffmpeg/core/dist/umd'\r\n  //const baseURL = \".\"\r\n  await ffmpeg.load({\r\n    coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),\r\n    wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),\r\n  });\r\n\r\n  // const file = await document.getElementById(\"fileInput\").files[0] ? await document.getElementById(\"fileInput\").files[0] : await processFetchedFile(); // With a default file for easy testing.\r\n  const file = await document.getElementById(\"fileInput\").files[0];\r\n  if (!file) { return }\r\n  const { name } = file;\r\n  const outputFileType = document.getElementById('outputType').value;\r\n  document.getElementById('output').firstChild.replaceWith(document.createElement('span'));\r\n  await ffmpeg.writeFile(name, await fetchFile(file));\r\n  document.getElementById('progress').textContent = 'Transcoding started';\r\n  console.log(`${new Date().toLocaleTimeString()} Transcoding started`);\r\n  await ffmpeg.exec(['-i', name, `output.${outputFileType}`]);\r\n  document.getElementById('progress').textContent = 'Transcoding ended';\r\n  console.log(`${new Date().toLocaleTimeString()} Transcoding ended`);\r\n  const data = await ffmpeg.readFile(`output.${outputFileType}`);\r\n  if (outputFileType == 'gif') {\r\n    const imgTag = document.createElement('img');\r\n    imgTag.src = URL.createObjectURL(new Blob([data.buffer], { type: 'image/gif' }));\r\n    imgTag.classList.add('outputImg');\r\n    document.getElementById('output').firstChild.replaceWith(imgTag);\r\n  } else {\r\n    const sourceTag = document.createElement('source');\r\n    sourceTag.src = URL.createObjectURL(new Blob([data.buffer], { type: `video/${outputFileType}` }));\r\n    const videoTag = document.createElement('video');\r\n    videoTag.setAttribute('controls', '');\r\n    videoTag.appendChild(sourceTag);\r\n    videoTag.classList.add('outputVideo')\r\n    document.getElementById('output').firstChild.replaceWith(videoTag);\r\n  }\r\n\r\n}\r\n\r\nasync function createFileFromUrl(url, filename, mimeType) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const blob = await response.blob();\r\n    return new File([blob], filename, { type: mimeType });\r\n  } catch (error) {\r\n    console.error(\"Error fetching or creating file:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// For testing only - useful if I want to have a default video so I don't have to select one every time.\r\nasync function processFetchedFile() {\r\n  const fileUrl = \"./thanks-i-hate-it.mp4\";\r\n  const fileName = \"thanks-i-hate-it.mp4\";\r\n  const fileMimeType = \"video/mp4\";\r\n\r\n  const myFile = await createFileFromUrl(fileUrl, fileName, fileMimeType);\r\n\r\n  return myFile;\r\n}\r\n\r\nconst handleInput = () => {\r\n  const file = document.getElementById('fileInput').files[0];\r\n  document.getElementById('output').firstChild.replaceWith(document.createElement('span'));\r\n  if (file.type == 'image/gif') {\r\n    const imgTag = document.createElement('img');\r\n    imgTag.src = URL.createObjectURL(file);\r\n    imgTag.classList.add('inputImg')\r\n    document.getElementById('originalFile').firstChild.replaceWith(imgTag);\r\n  } else {\r\n    const sourceTag = document.createElement('source');\r\n    sourceTag.src = URL.createObjectURL(file);\r\n    const videoTag = document.createElement('video');\r\n    videoTag.setAttribute('controls', '');\r\n    videoTag.appendChild(sourceTag);\r\n    videoTag.classList.add('inputVideo');\r\n    document.getElementById('originalFile').firstChild.replaceWith(videoTag);\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  document.getElementById('startTranscode').addEventListener('click', transcode);\r\n  document.getElementById('chooseFile').addEventListener('click', () => {\r\n    document.getElementById('fileInput').click();\r\n  });\r\n  document.getElementById('fileInput').addEventListener('change', handleInput);\r\n});","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}