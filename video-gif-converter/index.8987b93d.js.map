{"mappings":"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GAAA;QAAA;IAAA;IAAA,OAAA;AAAA;AAAA,SAASC,EAAeC,CAAAA;IACtB,OATF,SAAiBA,CAAAA;QACf,OACY,SAAVA,KACiB,YAAA,OAAVA,KACPhH,OAAOa,SAAAA,CAAUC,cAAAA,CAAeC,IAAAA,CAAKiG,GAAO;IAEhD,EAGcA,KACHA,IAEF,IAAIlF,MAAuB,YAAA,OAAVkF,IAAqBA,IAAQ;AACvD;ACXO,MAAME,IAAa;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CAAA,EAGWC,IAAe;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CAAA,ECtHIC,IAAsB,KAAK,IAuB3BC,IAAkB;IACtBC,WAAAA,CAAW;IACXC,WAAW;IACXC,QAAQ;IACRC,MAAAA,CAAM;AAAA;AAgBR,MAAMC;IAcJC,YAAYC,CAAAA,EAAkC1B,CAAAA,CAAAA;QAC5C3F,IAAAA,CAAKqH,eAAAA,GAAkBA,GACvBrH,IAAAA,CAAK2F,OAAAA,GAAUA,GAGf3F,IAAAA,CAAKsH,uBAAAA,GAA0B,IAAID,EAAgBF,SAAAA,CAC9B,aAAnBxB,EAAQsB,MAAAA,GAAsB,SAAStB,EAAQsB,MAAAA,EAC/CtB,EAAQoB,SAAAA,EAC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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-04883d9123bd304c.js","script.js","node_modules/@ffmpeg/ffmpeg/dist/umd/ffmpeg.js","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/universalModuleDefinition","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/bootstrap","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/define property getters","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/get javascript chunk filename","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/global","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/hasOwnProperty shorthand","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/make namespace object","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/publicPath","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/webpack/runtime/jsonp chunk loading","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/dist/esm/const.js","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/dist/esm/utils.js","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/dist/esm/errors.js","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/dist/esm/classes.js","node_modules/@ffmpeg/ffmpeg/dist/umd/webpack:/FFmpegWASM/dist/esm/types.js","node_modules/@ffmpeg/util/dist/cjs/index.js","node_modules/@ffmpeg/util/dist/cjs/errors.js","node_modules/@ffmpeg/util/dist/cjs/const.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/mediainfo.js/dist/esm-bundle/index.min.js","node_modules/mediainfo.js/src/error.ts","node_modules/mediainfo.js/src/MediaInfoResult.ts","node_modules/mediainfo.js/src/MediaInfo.ts","node_modules/mediainfo.js/src/mediaInfoFactory.ts","node_modules/mediainfo.js/src/typeGuard.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"9c17119d8987b93d\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, disposedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n    } catch (err) {\n      if (err.message) {\n        console.error(err.message);\n      }\n      ws = {};\n    }\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    disposedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'reload') {\n      fullReload();\n    } else if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n        hmrDisposeQueue();\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        let processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  if (ws instanceof WebSocket) {\n    ws.onerror = function (e) {\n      if (e.message) {\n        console.error(e.message);\n      }\n    };\n    ws.onclose = function () {\n      console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","// From the actual documentation\r\nimport { FFmpeg } from '@ffmpeg/ffmpeg';\r\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\r\n\r\nffmpeg = new FFmpeg();\r\n//ffmpeg.on(\"log\", ({ message }) => { console.log(message); }); // If ffmpeg calls its log method, log that to the console.\r\nffmpeg.on(\"log\", getVideoFps); // ffmpeg.wasm doesn't provide a good way to get FPS, so we have to parse its logs for that info.\r\nffmpeg.on(\"progress\", ({ progress, time }) => {\r\n  console.log(`progress: ${progress}`);\r\n  console.log(`time: ${time}`);\r\n  document.getElementById('progress').textContent = `${(progress * 100).toFixed(2)} %, time: ${(time / 1000000).toFixed(2)}s`;\r\n}); // Show progress on the page.\r\n\r\nimport mediaInfoFactory from 'mediainfo.js';\r\nlet mediainfo = '';\r\n\r\n(async () => {\r\n  const baseURL = 'https://unpkg.com/@ffmpeg/core/dist/umd'\r\n\r\n  /*  const baseURL = './';\r\n  await ffmpeg.load({\r\n    coreURL: await toBlobURL(`${baseURL}ffmpeg-core.js`, 'text/javascript'),\r\n    wasmURL: await toBlobURL(`${baseURL}ffmpeg-core.wasm`, 'application/wasm')\r\n  });*/\r\n\r\n  //const baseURL = \".\"\r\n\r\n  await ffmpeg.load({\r\n    coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),\r\n    wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),\r\n  });\r\n\r\n  //const mediainfo = await mediaInfoFactory();\r\n  mediainfo = await mediaInfoFactory(({\r\n    locateFile: function (path, scriptDirectory) {\r\n      // Customize the path here.\r\n      return \"./MediaInfoModule.wasm\"; // Replace with your actual path.\r\n    }\r\n  }));\r\n\r\n})()\r\n\r\n\r\nconst transcode = async () => {\r\n\r\n  const file = await document.getElementById(\"fileInput\").files[0] ? await document.getElementById(\"fileInput\").files[0] : await processFetchedFile(); // With a default file for easy testing.\r\n  //const file = await document.getElementById(\"fileInput\").files[0];\r\n  if (!file) { return }\r\n  const { name } = file;\r\n  const outputFileType = document.getElementById('outputType').value;\r\n  document.getElementById('output').firstChild.replaceWith(document.createElement('span'));\r\n  await ffmpeg.writeFile(name, await fetchFile(file));\r\n  document.getElementById('progress').textContent = 'Transcoding started';\r\n  console.log(`${new Date().toLocaleTimeString()} Transcoding started`);\r\n  await ffmpeg.exec(['-i', name, '-pix_fmt', 'yuv420p', `output.${outputFileType}`]); // Adding -pix_fmt yuv420p so Firefox can play the video.\r\n  document.getElementById('progress').textContent = 'Transcoding ended';\r\n  console.log(`${new Date().toLocaleTimeString()} Transcoding ended`);\r\n  const data = await ffmpeg.readFile(`output.${outputFileType}`);\r\n  if (outputFileType == 'gif') {\r\n    const imgTag = document.createElement('img');\r\n    imgTag.src = URL.createObjectURL(new Blob([data.buffer], { type: 'image/gif' }));\r\n    imgTag.id = 'outputImg';\r\n    document.getElementById('output').firstChild.replaceWith(imgTag);\r\n  } else {\r\n    const sourceTag = document.createElement('source');\r\n    sourceTag.src = URL.createObjectURL(new Blob([data.buffer], { type: `video/${outputFileType}` }));\r\n    const videoTag = document.createElement('video');\r\n    videoTag.setAttribute('controls', '');\r\n    videoTag.appendChild(sourceTag);\r\n    videoTag.id = 'outputVideo';\r\n    document.getElementById('output').firstChild.replaceWith(videoTag);\r\n  }\r\n}\r\n\r\nasync function createFileFromUrl(url, filename, mimeType) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const blob = await response.blob();\r\n    return new File([blob], filename, { type: mimeType });\r\n  } catch (error) {\r\n    console.error(\"Error fetching or creating file:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// For testing only - useful if I want to have a default video so I don't have to select one every time.\r\nasync function processFetchedFile() {\r\n  //const fileUrl = \"./thanks-i-hate-it.mp4\";\r\n  const fileUrl = \"./lindsay-ellis-thanks-i-hate-it-reencoded.mp4\";\r\n  const fileName = \"thanks-i-hate-it.mp4\";\r\n  const fileMimeType = \"video/mp4\";\r\n  const myFile = await createFileFromUrl(fileUrl, fileName, fileMimeType);\r\n  handleInput(new Event('noFileProvided'), myFile);\r\n  return myFile;\r\n}\r\n\r\nconst handleInput = (event, file) => { // This can be called either by choosing a file, or by clicking Begin conversion. In the latter case the File parameter will be empty so we'll get the file from the file picker.\r\n  if (!file) { file = document.getElementById('fileInput').files[0]; }\r\n  document.getElementById('output').firstChild.replaceWith(document.createElement('span'));\r\n  if (file.type == 'image/gif') {\r\n    const imgTag = document.createElement('img');\r\n    imgTag.src = URL.createObjectURL(file);\r\n    imgTag.id = 'inputImg';\r\n    imgTag.classList.add('centered');\r\n    imgTag.classList.add('centereText');\r\n    document.getElementById('originalFile').firstChild.replaceWith(imgTag);\r\n  } else {\r\n    const sourceTag = document.createElement('source');\r\n    sourceTag.src = URL.createObjectURL(file);\r\n    const videoTag = document.createElement('video');\r\n    videoTag.setAttribute('controls', '');\r\n    videoTag.appendChild(sourceTag);\r\n    videoTag.id = ('inputVideo');\r\n    videoTag.classList.add('centered');\r\n    videoTag.classList.add('centereText');\r\n    document.getElementById('originalFile').firstChild.replaceWith(videoTag);\r\n    videoTag.addEventListener('loadedmetadata', getInputDetails);\r\n  } 3\r\n\r\n}\r\n\r\nconst getInputDetails = async (e) => {\r\n  const videoTag = e.target;\r\n  document.getElementById('inputLength').textContent = `${videoTag.duration}s`;\r\n  document.getElementById('inputResolution').textContent = `${videoTag.videoHeight} x ${videoTag.videoWidth}`;\r\n}\r\n\r\nasync function getVideoFps(message) {\r\n  if (message.message.includes(\"fps,\")) {\r\n    let fps = message.message.split(',');\r\n    fps = fps.filter((str) => { return str.includes('fps') });\r\n    console.log(fps);\r\n    document.getElementById('inputFps').textContent = `${fps}`;\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  document.getElementById('startTranscode').addEventListener('click', transcode);\r\n  document.getElementById('chooseFile').addEventListener('click', () => {\r\n    document.getElementById('fileInput').click();\r\n  });\r\n  document.getElementById('fileInput').addEventListener('change', (e) => { handleInput(e); });\r\n});",null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FFmpegWASM\"] = factory();\n\telse\n\t\troot[\"FFmpegWASM\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".ffmpeg.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.9\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.FFPROBE:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n","export var FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBlobURL = exports.downloadWithProgress = exports.importScript = exports.fetchFile = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nconst const_js_1 = require(\"./const.js\");\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        var _a, _b;\n        reject(Error(`File could not be read! Code=${((_b = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.code) || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nconst fetchFile = (file) => __awaiter(void 0, void 0, void 0, function* () {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = yield (yield fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = yield (yield fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = yield readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n});\nexports.fetchFile = fetchFile;\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nconst importScript = (url) => __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve) => {\n        const script = document.createElement(\"script\");\n        const eventHandler = () => {\n            script.removeEventListener(\"load\", eventHandler);\n            resolve();\n        };\n        script.src = url;\n        script.type = \"text/javascript\";\n        script.addEventListener(\"load\", eventHandler);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    });\n});\nexports.importScript = importScript;\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nconst downloadWithProgress = (url, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const resp = yield fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(const_js_1.HeaderContentLength) || \"-1\");\n        const reader = (_a = resp.body) === null || _a === void 0 ? void 0 : _a.getReader();\n        if (!reader)\n            throw errors_js_1.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = yield reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw errors_js_1.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = yield resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n});\nexports.downloadWithProgress = downloadWithProgress;\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nconst toBlobURL = (url, mimeType, progress = false, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    const buf = progress\n        ? yield (0, exports.downloadWithProgress)(url, cb)\n        : yield (yield fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n});\nexports.toBlobURL = toBlobURL;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_INCOMPLETED_DOWNLOAD = exports.ERROR_RESPONSE_BODY_READER = void 0;\nexports.ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexports.ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderContentLength = void 0;\nexports.HeaderContentLength = \"Content-Length\";\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,"function isError(error: unknown): error is Error {\n  return (\n    error !== null &&\n    typeof error === 'object' &&\n    Object.prototype.hasOwnProperty.call(error, 'message')\n  )\n}\n\nfunction unknownToError(error: unknown): Error {\n  if (isError(error)) {\n    return error\n  }\n  return new Error(typeof error === 'string' ? error : 'Unknown error')\n}\n\nexport { unknownToError }\n","// DO NOT EDIT! File generated using `generate-types` script.\n\nexport const INT_FIELDS = [\n  'Active_Height',\n  'Active_Width',\n  'AudioCount',\n  'Audio_Channels_Total',\n  'BitDepth_Detected',\n  'BitDepth',\n  'BitDepth_Stored',\n  'Channels',\n  'Channels_Original',\n  'Chapters_Pos_Begin',\n  'Chapters_Pos_End',\n  'Comic_Position_Total',\n  'Count',\n  'DataSize',\n  'ElementCount',\n  'EPG_Positions_Begin',\n  'EPG_Positions_End',\n  'FirstPacketOrder',\n  'FooterSize',\n  'Format_Settings_GMC',\n  'Format_Settings_RefFrames',\n  'Format_Settings_SliceCount',\n  'FrameCount',\n  'FrameRate_Den',\n  'FrameRate_Num',\n  'GeneralCount',\n  'HeaderSize',\n  'Height_CleanAperture',\n  'Height',\n  'Height_Offset',\n  'Height_Original',\n  'ImageCount',\n  'Lines_MaxCharacterCount',\n  'Lines_MaxCountPerEvent',\n  'Matrix_Channels',\n  'MenuCount',\n  'OtherCount',\n  'Part_Position',\n  'Part_Position_Total',\n  'Played_Count',\n  'Reel_Position',\n  'Reel_Position_Total',\n  'Resolution',\n  'Sampled_Height',\n  'Sampled_Width',\n  'SamplingCount',\n  'Season_Position',\n  'Season_Position_Total',\n  'Source_FrameCount',\n  'Source_SamplingCount',\n  'Source_StreamSize_Encoded',\n  'Source_StreamSize',\n  'Status',\n  'Stored_Height',\n  'Stored_Width',\n  'StreamCount',\n  'StreamKindID',\n  'StreamKindPos',\n  'StreamSize_Demuxed',\n  'StreamSize_Encoded',\n  'StreamSize',\n  'TextCount',\n  'Track_Position',\n  'Track_Position_Total',\n  'Video0_Delay',\n  'VideoCount',\n  'Width_CleanAperture',\n  'Width',\n  'Width_Offset',\n  'Width_Original',\n] as const\n\nexport const FLOAT_FIELDS = [\n  'Active_DisplayAspectRatio',\n  'BitRate_Encoded',\n  'BitRate_Maximum',\n  'BitRate_Minimum',\n  'BitRate',\n  'BitRate_Nominal',\n  'Bits-Pixel_Frame',\n  'BitsPixel_Frame',\n  'Compression_Ratio',\n  'Delay',\n  'Delay_Original',\n  'DisplayAspectRatio_CleanAperture',\n  'DisplayAspectRatio',\n  'DisplayAspectRatio_Original',\n  'Duration_End_Command',\n  'Duration_End',\n  'Duration_FirstFrame',\n  'Duration_LastFrame',\n  'Duration',\n  'Duration_Start2End',\n  'Duration_Start_Command',\n  'Duration_Start',\n  'Events_MinDuration',\n  'FrameRate_Maximum',\n  'FrameRate_Minimum',\n  'FrameRate',\n  'FrameRate_Nominal',\n  'FrameRate_Original_Den',\n  'FrameRate_Original',\n  'FrameRate_Original_Num',\n  'FrameRate_Real',\n  'Interleave_Duration',\n  'Interleave_Preload',\n  'Interleave_VideoFrames',\n  'OverallBitRate_Maximum',\n  'OverallBitRate_Minimum',\n  'OverallBitRate',\n  'OverallBitRate_Nominal',\n  'PixelAspectRatio_CleanAperture',\n  'PixelAspectRatio',\n  'PixelAspectRatio_Original',\n  'SamplesPerFrame',\n  'SamplingRate',\n  'Source_Duration_FirstFrame',\n  'Source_Duration_LastFrame',\n  'Source_Duration',\n  'TimeStamp_FirstFrame',\n  'Video_Delay',\n] as const\n\nexport interface CreationInfo {\n  readonly version: string\n  readonly url?: string\n  readonly build_date?: string\n  readonly build_time?: string\n  readonly compiler_ident?: string\n}\n\nexport type Extra = Record<string, unknown>\n\nexport interface BaseTrack {\n  /** Documents the type of encoded media with the track, ie: General, Video, Audio, Text, Image, etc. */\n  readonly '@type': 'General' | 'Video' | 'Audio' | 'Text' | 'Image' | 'Menu' | 'Other'\n  /** If there is more than one track of the same type (i.e. four audio tracks) this attribute will number them according to storage order within the bitstream. */\n  readonly '@typeorder'?: string\n  /** Holds (untyped) extra information if available */\n  readonly extra?: Extra\n  /** Count of objects available in this stream created by MediaInfo when analyzing file. @internal */\n  readonly Count?: number\n  /** Status of bit field when parsing. Options are: 0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished. @internal */\n  readonly Status?: number\n  /** Total number of streams available for this StreamKind. Counting starts at 1 */\n  readonly StreamCount?: number\n  /** Name of stream type. Options are: Audio, General, Image, Menu, Other, Text, or Video */\n  readonly StreamKind?: string\n  /** Name of stream type. Options are: Audio, General, Image, Menu, Other, Text, or Video */\n  readonly StreamKind_String?: string\n  /** Identification number for stream, assigned in order of parsing. Counting starts at 0 */\n  readonly StreamKindID?: number\n  /** Identification number for stream when multiple, assigned in order of parsing. Counting starts at 1 */\n  readonly StreamKindPos?: number\n  /** Stream order in the file for type of stream. Counting starts at 0 */\n  readonly StreamOrder?: string\n  /** Order of the first fully decodable packet parsed in the file for stream type. Counting starts at 0 */\n  readonly FirstPacketOrder?: number\n  /** Last **Inform** call. @internal */\n  readonly Inform?: string\n  /** The identification number for this stream in this file */\n  readonly ID?: string\n  /** The identification number for this stream in this file (String format) */\n  readonly ID_String?: string\n  /** Identification for this stream in the original medium of the material, taken from Tag metadata */\n  readonly OriginalSourceMedium_ID?: string\n  /** Identification for this stream in the original medium of the material, taken from Tag metadata (String format) */\n  readonly OriginalSourceMedium_ID_String?: string\n  /** The unique ID for this stream, should be copied with stream copy */\n  readonly UniqueID?: string\n  /** The unique ID for this stream, should be copied with stream copy */\n  readonly UniqueID_String?: string\n  /** The menu ID for this stream in this file */\n  readonly MenuID?: string\n  /** The menu ID for this stream in this file */\n  readonly MenuID_String?: string\n  /** Format used */\n  readonly Format?: string\n  /** Format used + additional features */\n  readonly Format_String?: string\n  /** More details about the identified Format */\n  readonly Format_Info?: string\n  /** Link to a description of this format */\n  readonly Format_Url?: string\n  /** Commercial name used by vendor for these settings or Format field if there is no difference */\n  readonly Format_Commercial?: string\n  /** Commercial name used by vendor for these settings if there is one */\n  readonly Format_Commercial_IfAny?: string\n  /** Version for the identified format */\n  readonly Format_Version?: string\n  /** Profile of the Format */\n  readonly Format_Profile?: string\n  /** Compression method used */\n  readonly Format_Compression?: string\n  /** Settings used and required by decoder */\n  readonly Format_Settings?: string\n  /** Features required to fully support the file content */\n  readonly Format_AdditionalFeatures?: string\n  /** Codec ID, if defined by the container */\n  readonly CodecID?: string\n  /** Codec ID, if defined by the container (String format) */\n  readonly CodecID_String?: string\n  /** More information about this codec */\n  readonly CodecID_Info?: string\n  /** Common alternative names for this codec */\n  readonly CodecID_Hint?: string\n  /** A link to more details about this codec */\n  readonly CodecID_Url?: string\n  /** Codec description, as defined by the container */\n  readonly CodecID_Description?: string\n}\n\nexport interface AudioTrack extends BaseTrack {\n  readonly '@type': 'Audio'\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Whether Spectral band replication settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_SBR?: string\n  /** Whether Spectral band replication settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_SBR_String?: string\n  /** Whether Parametric Stereo settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_PS?: string\n  /** Whether Parametric Stereo settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_PS_String?: string\n  /** Profile for format settings used in encoding (e.g. Joint Stereo) */\n  readonly Format_Settings_Mode?: string\n  /** Extended format settings profile for Joint Stereo, derived from header data (e.g. Intensity Stereo + MS Stereo) */\n  readonly Format_Settings_ModeExtension?: string\n  /** Emphasis format settings for MPEG audio, derived from header data (e.g. 50/15ms) */\n  readonly Format_Settings_Emphasis?: string\n  /** Settings for Vorbis spectral \"floor\" (a low-resolution representation of the audio spectrum for the given channel in the current frame) vector (e.g. Floor0) */\n  readonly Format_Settings_Floor?: string\n  /** Agency or company responsible for format settings used in encoding (e.g. Microsoft) */\n  readonly Format_Settings_Firm?: string\n  /** Order of bytes required for decoding. Options are Big/Little */\n  readonly Format_Settings_Endianness?: string\n  /** How numbers are stored in stream's encoding. Options are Signed/Unsigned */\n  readonly Format_Settings_Sign?: string\n  /** U-law or A-law */\n  readonly Format_Settings_Law?: string\n  /** ITU Telecommunication Standardization Sector compression standard used in encoding (e.g. G.726) */\n  readonly Format_Settings_ITU?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Matrix format used in encoding (e.g. DTS Neural Audio) */\n  readonly Matrix_Format?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Duration of content stored in the file, in ms */\n  readonly Source_Duration?: number\n  /** Duration of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** Number of channels (e.g. 2) */\n  readonly Channels?: number\n  /** Number of channels (with measurement) */\n  readonly Channels_String?: string\n  /** Number of channels (e.g. 6) */\n  readonly Channels_Original?: number\n  /** Number of channels, with measurement (e.g. 6 channels) */\n  readonly Channels_Original_String?: string\n  /** Number of channels after matrix decoding */\n  readonly Matrix_Channels?: number\n  /** Number of channels after matrix decoding, with measurement */\n  readonly Matrix_Channels_String?: string\n  /** Position of channels (e.g. Front: L C R, Side: L R, Back: L R, LFE) */\n  readonly ChannelPositions?: string\n  /** Position of channels (e.g. Front: L C R, Side: L R, Back: L R, LFE) */\n  readonly ChannelPositions_Original?: string\n  /** Position of channels in x/y.z format (e.g. 3/2/0.1) */\n  readonly ChannelPositions_String2?: string\n  /** Position of channels in x/y.z format (e.g. 3/2/0.1) */\n  readonly ChannelPositions_Original_String2?: string\n  /** Position of channels after matrix decoding */\n  readonly Matrix_ChannelPositions?: string\n  /** Position of channels after matrix decoding in x/y.z format */\n  readonly Matrix_ChannelPositions_String2?: string\n  /** Layout of channels (e.g. L R C LFE Ls Rs Lb Rb) */\n  readonly ChannelLayout?: string\n  /** Layout of channels (e.g. L R C LFE Ls Rs Lb Rb) */\n  readonly ChannelLayout_Original?: string\n  /** ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon */\n  readonly ChannelLayoutID?: string\n  /** Samples per frame (e.g. 1536) */\n  readonly SamplesPerFrame?: number\n  /** Sampling rate, in Hertz (e.g. 48000) */\n  readonly SamplingRate?: number\n  /** Sampling rate, in Hertz, with measurement (e.g. 48.0 KHz) */\n  readonly SamplingRate_String?: string\n  /** Sample count (based on sampling rate) */\n  readonly SamplingCount?: number\n  /** Source Sample count (based on sampling rate), with information derived from header metadata */\n  readonly Source_SamplingCount?: number\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Frame count */\n  readonly FrameCount?: number\n  /** Source frame count */\n  readonly Source_FrameCount?: number\n  /** Number of bits in each sample (resolution) of stream (e.g. 16). This field will show the significant bits if the stored bit depth is different */\n  readonly BitDepth?: number\n  /** Number of bits in each sample (resolution) of stream (e.g. 16). This field will show the significant bits if the stored bit depth is different */\n  readonly BitDepth_String?: string\n  /** Number of bits in each sample (resolution), as detected during scan of the input by the muxer, in bits (e.g. 24) */\n  readonly BitDepth_Detected?: number\n  /** Number of bits in each sample (resolution), as detected during scan of the input by the muxer, in bits (e.g. 24) */\n  readonly BitDepth_Detected_String?: string\n  /** Stored number of bits in each sample (resolution), in bits (e.g. 24) */\n  readonly BitDepth_Stored?: number\n  /** Stored number of bits in each sample (resolution), in bits (e.g. 24) */\n  readonly BitDepth_Stored_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings, (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream relative to video, in ms (e.g. -80) */\n  readonly Video_Delay?: number\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String1?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String2?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (e.g. -00:00:00.080) */\n  readonly Video_Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Video_Delay_String4?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Video_Delay_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly ReplayGain_Gain?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly ReplayGain_Gain_String?: string\n  /** The maximum absolute peak value of the item */\n  readonly ReplayGain_Peak?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment_String?: string\n  /** For interleaved video, between how many video frames this stream is inserted (e.g. 0.51 video frame) */\n  readonly Interleave_VideoFrames?: number\n  /** For interleaved video, between how much time, in ms, this stream is inserted (e.g. 21 ms) */\n  readonly Interleave_Duration?: number\n  /** For interleaved video, between how many video frames this stream is inserted, as duration with measurement and amount of frame (s) in parenthesis (e.g. 21 ms (0.51 video frame)) */\n  readonly Interleave_Duration_String?: string\n  /** How much time is buffered before the first video frame, in ms (e.g. 500) */\n  readonly Interleave_Preload?: number\n  /** How much time is buffered before the first video frame, in ms with measurement (e.g. 500 ms) */\n  readonly Interleave_Preload_String?: string\n  /** Title of track */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n}\n\nexport interface GeneralTrack extends BaseTrack {\n  readonly '@type': 'General'\n  /** Total number of General streams in this file */\n  readonly GeneralCount?: number\n  /** Total number of Video streams in this file */\n  readonly VideoCount?: number\n  /** Total number of Audio streams in this file */\n  readonly AudioCount?: number\n  /** Total number of Text streams in this file */\n  readonly TextCount?: number\n  /** Total number of Other streams in this file */\n  readonly OtherCount?: number\n  /** Total number of Image streams in this file */\n  readonly ImageCount?: number\n  /** Total number of Menu streams in this file */\n  readonly MenuCount?: number\n  /** Video codecs found in this file, separated by forward slash (\"/\") */\n  readonly Video_Format_List?: string\n  /** Video codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Video_Format_WithHint_List?: string\n  /** List of video stream languages in this file separated by forward slash (\"/\") */\n  readonly Video_Language_List?: string\n  /** Audio codecs found in this file, separated by forward slash (\"/\") */\n  readonly Audio_Format_List?: string\n  /** Audio codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Audio_Format_WithHint_List?: string\n  /** List of audio stream languages in this file separated by forward slash (\"/\") */\n  readonly Audio_Language_List?: string\n  /** Total count of channels in all audio streams */\n  readonly Audio_Channels_Total?: number\n  /** Text codecs found in this file, separated by forward slash (\"/\") */\n  readonly Text_Format_List?: string\n  /** Text codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Text_Format_WithHint_List?: string\n  /** List of text stream languages in this file separated by forward slash (\"/\") */\n  readonly Text_Language_List?: string\n  /** Other data formats found in this file, separated by forward slash (\"/\") */\n  readonly Other_Format_List?: string\n  /** Other data formats found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Other_Format_WithHint_List?: string\n  /** List of other stream languages (typically Chapters) in this file separated by forward slash (\"/\") */\n  readonly Other_Language_List?: string\n  /** Image codecs found in this file, separated by forward slash (\"/\") */\n  readonly Image_Format_List?: string\n  /** Image codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Image_Format_WithHint_List?: string\n  /** List of image stream languages in this file separated by forward slash (\"/\") */\n  readonly Image_Language_List?: string\n  /** Menu formats found in this file, separated by forward slash (\"/\") */\n  readonly Menu_Format_List?: string\n  /** Menu formats found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Menu_Format_WithHint_List?: string\n  /** List of menu stream languages in this file separated by forward slash (\"/\") */\n  readonly Menu_Language_List?: string\n  /** Full path for this file (Folder+Name+Extension) */\n  readonly CompleteName?: string\n  /** Folder name for this file */\n  readonly FolderName?: string\n  /** File name and extension */\n  readonly FileNameExtension?: string\n  /** File name only */\n  readonly FileName?: string\n  /** File extension only */\n  readonly FileExtension?: string\n  /** Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) */\n  readonly CompleteName_Last?: string\n  /** Folder name only of the last file (in the case of a sequence of files) */\n  readonly FolderName_Last?: string\n  /** File name and extension of the last file (in the case of a sequence of files) */\n  readonly FileNameExtension_Last?: string\n  /** File name only of the last file (in the case of a sequence of files) */\n  readonly FileName_Last?: string\n  /** File extension only of the last file (in the case of a sequence of files) */\n  readonly FileExtension_Last?: string\n  /** Known extensions for the identified format */\n  readonly Format_Extensions?: string\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** Version of the CodecID */\n  readonly CodecID_Version?: string\n  /** List of codecs that are compatible with the identified container */\n  readonly CodecID_Compatible?: string\n  /** If Audio and video are muxed */\n  readonly Interleaved?: string\n  /** File size, in bytes */\n  readonly FileSize?: string\n  /** File size with measurement (measured in powers of 1024) */\n  readonly FileSize_String?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the nearest integer */\n  readonly FileSize_String1?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the two most significant digits */\n  readonly FileSize_String2?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the three most significant digits */\n  readonly FileSize_String3?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the four most significant digits */\n  readonly FileSize_String4?: string\n  /** Play time of the content, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Start time of stream, in UTC */\n  readonly Duration_Start?: number\n  readonly Duration_Start_String?: string\n  readonly Duration_Start_String1?: string\n  readonly Duration_Start_String2?: string\n  readonly Duration_Start_String3?: string\n  readonly Duration_Start_String4?: string\n  readonly Duration_Start_String5?: string\n  /** End time of stream, in UTC */\n  readonly Duration_End?: number\n  readonly Duration_End_String?: string\n  readonly Duration_End_String1?: string\n  readonly Duration_End_String2?: string\n  readonly Duration_End_String3?: string\n  readonly Duration_End_String4?: string\n  readonly Duration_End_String5?: string\n  /** Bit rate mode of all streams (CBR, VBR) */\n  readonly OverallBitRate_Mode?: string\n  /** Bit rate mode of all streams, as word (Variable, Constant) */\n  readonly OverallBitRate_Mode_String?: string\n  /** Bit rate of all streams, in bps */\n  readonly OverallBitRate?: number\n  /** Bit rate of all streams, with measurement (e.g. 14.2 kb/s) */\n  readonly OverallBitRate_String?: string\n  /** Minimum total bit rate of all streams, in bps */\n  readonly OverallBitRate_Minimum?: number\n  /** Minimum bit rate of all streams, with measurement */\n  readonly OverallBitRate_Minimum_String?: string\n  /** Nominal bit rate of all streams, in bps */\n  readonly OverallBitRate_Nominal?: number\n  /** Nominal bit rate of all streams, with measurement */\n  readonly OverallBitRate_Nominal_String?: string\n  /** Maximum bit rate of all streams, in bps */\n  readonly OverallBitRate_Maximum?: number\n  /** Maximum bit rate of all streams, with measurement */\n  readonly OverallBitRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Den?: number\n  /** Frame count, if a stream has the same frame rate everywhere */\n  readonly FrameCount?: number\n  /** Delay fixed in the stream (relative), is s (ms for text output) */\n  readonly Delay?: number\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String?: string\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String1?: string\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String2?: string\n  /** Delay in format HH:MM:SS.mmm */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode, for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Delay source (Container, Stream, or empty) */\n  readonly Delay_Source?: string\n  /** Delay source (Container, Stream, or empty) */\n  readonly Delay_Source_String?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Header field size, in bytes */\n  readonly HeaderSize?: number\n  /** Data field size, in bytes */\n  readonly DataSize?: number\n  /** Footer field size, in bytes */\n  readonly FooterSize?: number\n  /** Set if this file is streamable or not (Yes, No) */\n  readonly IsStreamable?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly Album_ReplayGain_Gain?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly Album_ReplayGain_Gain_String?: string\n  /** The maximum absolute peak value of the item */\n  readonly Album_ReplayGain_Peak?: string\n  /** Encryption */\n  readonly Encryption?: string\n  /** Encryption format */\n  readonly Encryption_Format?: string\n  /** Encryption length (128, 192 or 256 bits) */\n  readonly Encryption_Length?: string\n  /** Encryption method */\n  readonly Encryption_Method?: string\n  /** Encryption mode */\n  readonly Encryption_Mode?: string\n  /** Encryption padding */\n  readonly Encryption_Padding?: string\n  /** Encryption initialization vector */\n  readonly Encryption_InitializationVector?: string\n  /** Universal Ad-ID, see https://ad-id.org for more information */\n  readonly UniversalAdID_String?: string\n  /** Universal Ad-ID registry */\n  readonly UniversalAdID_Registry?: string\n  /** Universal Ad-ID value */\n  readonly UniversalAdID_Value?: string\n  /** Title of file @group Title */\n  readonly Title?: string\n  /** More title information @group Title */\n  readonly Title_More?: string\n  /** URL @group Title */\n  readonly Title_Url?: string\n  /** Universe that the file's contents belong to (e.g. Star Wars, Stargate, Buffy, Dragonball) @group Title */\n  readonly Domain?: string\n  /** Name of the series (e.g. Star Wars movies, Stargate SG-1, Angel) @group Title */\n  readonly Collection?: string\n  /** Name of the season (e.g. first Star Wars Trilogy, Season 1) @group Title */\n  readonly Season?: string\n  /** Number of the Season @group Title */\n  readonly Season_Position?: number\n  /** Total number of seasons @group Title */\n  readonly Season_Position_Total?: number\n  /** Name of the movie (e.g. Star Wars: A New Hope) @group Title */\n  readonly Movie?: string\n  /** More information about the Movie @group Title */\n  readonly Movie_More?: string\n  /** Country where the movie was produced @group Title */\n  readonly Movie_Country?: string\n  /** Homepage for the movie @group Title */\n  readonly Movie_Url?: string\n  /** Name of the album (e.g. The Joshua Tree) @group Title */\n  readonly Album?: string\n  /** More information about the Album @group Title */\n  readonly Album_More?: string\n  /** Alternate name of the album, optimized for sorting purposes (e.g. Joshua Tree, The) @group Title */\n  readonly Album_Sort?: string\n  /** Album performer/artist of this file @group Entity */\n  readonly Album_Performer?: string\n  /** Alternate name for the performer, optimized for sorting purposes (e.g. Beatles, The) @group Entity */\n  readonly Album_Performer_Sort?: string\n  /** Homepage of the album performer/artist @group Entity */\n  readonly Album_Performer_Url?: string\n  /** Name of the comic book series @group Title */\n  readonly Comic?: string\n  /** More information about the comic book series @group Title */\n  readonly Comic_More?: string\n  /** Total number of comics @group Title */\n  readonly Comic_Position_Total?: number\n  /** Name of the part (e.g. CD1, CD2) @group Title */\n  readonly Part?: string\n  /** Number of the part @group Title */\n  readonly Part_Position?: number\n  /** Total number of parts @group Title */\n  readonly Part_Position_Total?: number\n  /** Name of the reel @group Title */\n  readonly Reel?: string\n  /** Number of the reel @group Title */\n  readonly Reel_Position?: number\n  /** Total number of reel @group Title */\n  readonly Reel_Position_Total?: number\n  /** Name of the track (e.g. track 1, track 2) @group Title */\n  readonly Track?: string\n  /** More information about the Track @group Title */\n  readonly Track_More?: string\n  /** Link to a site about this Track @group Title */\n  readonly Track_Url?: string\n  /** Alternate name for the track, optimized for sorting purposes @group Title */\n  readonly Track_Sort?: string\n  /** Number of this Track @group Title */\n  readonly Track_Position?: number\n  /** Total number of tracks @group Title */\n  readonly Track_Position_Total?: number\n  /** MXF package name */\n  readonly PackageName?: string\n  /** iTunes grouping @group Title */\n  readonly Grouping?: string\n  /** Name of the Chapter @group Title */\n  readonly Chapter?: string\n  /** Name of the Subtrack @group Title */\n  readonly SubTrack?: string\n  /** Original name of the Album @group Title */\n  readonly Original_Album?: string\n  /** Original name of the Movie @group Title */\n  readonly Original_Movie?: string\n  /** Original name of the Part @group Title */\n  readonly Original_Part?: string\n  /** Original name of the Track @group Title */\n  readonly Original_Track?: string\n  /** iTunes compilation @group Title */\n  readonly Compilation?: string\n  /** iTunes compilation @group Title */\n  readonly Compilation_String?: string\n  /** Main performer(s)/artist(s) @group Entity */\n  readonly Performer?: string\n  /** Alternate name for the performer, optimized for sorting purposes (e.g. Beatles, The) @group Entity */\n  readonly Performer_Sort?: string\n  /** Homepage of the performer/artist @group Entity */\n  readonly Performer_Url?: string\n  /** Original artist(s)/performer(s) @group Entity */\n  readonly Original_Performer?: string\n  /** Band/orchestra/accompaniment/musician @group Entity */\n  readonly Accompaniment?: string\n  /** Name of the original composer @group Entity */\n  readonly Composer?: string\n  /** Nationality of the primary composer of the piece @group Entity */\n  readonly Composer_Nationality?: string\n  /** Nationality of the primary composer of the piece (e.g. Mozart, Wolfgang Amadeus) @group Entity */\n  readonly Composer_Sort?: string\n  /** The person who arranged the piece (e.g. Ravel) @group Entity */\n  readonly Arranger?: string\n  /** The person who wrote the lyrics for the piece @group Entity */\n  readonly Lyricist?: string\n  /** Original lyricist(s)/text writer(s) @group Entity */\n  readonly Original_Lyricist?: string\n  /** The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists, etc @group Entity */\n  readonly Conductor?: string\n  /** Name of the director @group Entity */\n  readonly Director?: string\n  /** Name of the codirector @group Entity */\n  readonly CoDirector?: string\n  /** Name of the assistant director @group Entity */\n  readonly AssistantDirector?: string\n  /** Name of the director of photography, also known as cinematographer @group Entity */\n  readonly DirectorOfPhotography?: string\n  /** Name of the sound engineer or sound recordist @group Entity */\n  readonly SoundEngineer?: string\n  /** Name of the person who oversees the artists and craftspeople who build the sets @group Entity */\n  readonly ArtDirector?: string\n  /** Name of the person responsible for designing the overall visual appearance of a movie @group Entity */\n  readonly ProductionDesigner?: string\n  /** Name of the choreographer @group Entity */\n  readonly Choreographer?: string\n  /** Name of the costume designer @group Entity */\n  readonly CostumeDesigner?: string\n  /** Real name of an actor/actress playing a role in the movie @group Entity */\n  readonly Actor?: string\n  /** Name of the character an actor or actress plays in this movie @group Entity */\n  readonly Actor_Character?: string\n  /** Author of the story or script @group Entity */\n  readonly WrittenBy?: string\n  /** Author of the screenplay or scenario (used for movies and TV shows) @group Entity */\n  readonly ScreenplayBy?: string\n  /** Editors name @group Entity */\n  readonly EditedBy?: string\n  /** Name of the person or organization that commissioned the subject of the file @group Entity */\n  readonly CommissionedBy?: string\n  /** Name of the producer of the media @group Entity */\n  readonly Producer?: string\n  /** Name of a co-producer of the media @group Entity */\n  readonly CoProducer?: string\n  /** Name of an executive producer of the media @group Entity */\n  readonly ExecutiveProducer?: string\n  /** Main musical artist for the media @group Entity */\n  readonly MusicBy?: string\n  /** Company responsible for distribution of the content @group Entity */\n  readonly DistributedBy?: string\n  /** Name of the person or organization who supplied the original subject @group Entity */\n  readonly OriginalSourceForm_DistributedBy?: string\n  /** The engineer who mastered the content for a physical medium or for digital distribution @group Entity */\n  readonly MasteredBy?: string\n  /** Name of the person/organisation that encoded/ripped the audio file @group Entity */\n  readonly EncodedBy?: string\n  /** Name of the artist(s) that interpreted, remixed, or otherwise modified the content @group Entity */\n  readonly RemixedBy?: string\n  /** Main production studio of the media @group Entity */\n  readonly ProductionStudio?: string\n  /** A very general metadata tag for everyone else that wants to be listed @group Entity */\n  readonly ThanksTo?: string\n  /** Name of the organization publishing the media (i.e. the record label) @group Entity */\n  readonly Publisher?: string\n  /** Publisher's official webpage @group Entity */\n  readonly Publisher_URL?: string\n  /** Brand or trademark associated with the marketing of music recordings and music videos @group Entity */\n  readonly Label?: string\n  /** Main genre of the media (e.g. classical, ambient-house, synthpop, sci-fi, drama, etc.) @group Classification */\n  readonly Genre?: string\n  /** Podcast category @group Classification */\n  readonly PodcastCategory?: string\n  /** Intended to reflect the mood of the item with a few keywords (e.g. Romantic, Sad, Uplifting, etc.) @group Classification */\n  readonly Mood?: string\n  /** The type or genre of the content (e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc.) @group Classification */\n  readonly ContentType?: string\n  /** Describes the topic of the file (e.g. \"Aerial view of Seattle.\") @group Classification */\n  readonly Subject?: string\n  /** A short description of the contents (e.g. \"Two birds flying.\") @group Classification */\n  readonly Description?: string\n  /** Keywords for the content separated by a comma, used for searching @group Classification */\n  readonly Keywords?: string\n  /** Plot outline or a summary of the story @group Classification */\n  readonly Summary?: string\n  /** Description of the story line of the item @group Classification */\n  readonly Synopsis?: string\n  /** Describes the period that the piece is from or about (e.g. Renaissance) @group Classification */\n  readonly Period?: string\n  /** Legal rating of a movie. Format depends on country of origin (e.g. PG, 16) @group Classification */\n  readonly LawRating?: string\n  /** Reason for the law rating @group Classification */\n  readonly LawRating_Reason?: string\n  /** The ICRA rating (previously RSACi) @group Classification */\n  readonly ICRA?: string\n  /** Date/year that the content was released @group Temporal */\n  readonly Released_Date?: string\n  /** Date/year that the content was originally released @group Temporal */\n  readonly Original_Released_Date?: string\n  /** Time/date/year that the recording began @group Temporal */\n  readonly Recorded_Date?: string\n  /** Time/date/year that the encoding of this content was completed @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time/date/year that the tags were added to this content @group Temporal */\n  readonly Tagged_Date?: string\n  /** Time/date/year that the composition of the music/script began @group Temporal */\n  readonly Written_Date?: string\n  /** Time/date/year that the content was digitally mastered @group Temporal */\n  readonly Mastered_Date?: string\n  /** Time that the file was created on the file system @group Temporal */\n  readonly File_Created_Date?: string\n  /** Local time that the file was created on the file system (not to be used in an international database) @group Temporal */\n  readonly File_Created_Date_Local?: string\n  /** Time that the file was last modified on the file system @group Temporal */\n  readonly File_Modified_Date?: string\n  /** Local time that the file was last modified on the file system (not to be used in an international database) @group Temporal */\n  readonly File_Modified_Date_Local?: string\n  /** Location where track was recorded, as Longitude+Latitude @group Spatial */\n  readonly Recorded_Location?: string\n  /** Location that the item was originally designed/written @group Spatial */\n  readonly Written_Location?: string\n  /** Location where an item is archived (e.g. Louvre, Paris, France) @group Spatial */\n  readonly Archival_Location?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Describes whether an image has been cropped and, if so, how it was cropped @group Technical */\n  readonly Cropped?: string\n  /** Specifies the size of the original subject of the file (e.g. 8.5 in h, 11 in w) @group Technical */\n  readonly Dimensions?: string\n  /** Stores dots per inch setting of the digitization mechanism used to produce the file @group Technical */\n  readonly DotsPerInch?: string\n  /** Describes the changes in lightness settings on the digitization mechanism made during the production of the file @group Technical */\n  readonly Lightness?: string\n  /** Original medium of the material (e.g. vinyl, Audio-CD, Super8 or BetaMax) @group Technical */\n  readonly OriginalSourceMedium?: string\n  /** Original form of the material (e.g. slide, paper, map) @group Technical */\n  readonly OriginalSourceForm?: string\n  /** Number of colors requested when digitizing (e.g. 256 for images or 32 bit RGB for video) @group Technical */\n  readonly OriginalSourceForm_NumColors?: string\n  /** Name of the product the file was originally intended for @group Technical */\n  readonly OriginalSourceForm_Name?: string\n  /** Describes whether the original image has been cropped and, if so, how it was cropped (e.g. 16:9 to 4:3, top and bottom) @group Technical */\n  readonly OriginalSourceForm_Cropped?: string\n  /** Identifies changes in sharpness the digitization mechanism made during the production of the file @group Technical */\n  readonly OriginalSourceForm_Sharpness?: string\n  /** Software used to tag the file @group Technical */\n  readonly Tagged_Application?: string\n  /** Average number of beats per minute @group Technical */\n  readonly BPM?: string\n  /** International Standard Recording Code, excluding the ISRC prefix and including hyphens @group Identifier */\n  readonly ISRC?: string\n  /** International Standard Book Number @group Identifier */\n  readonly ISBN?: string\n  /** International Standard Audiovisual Number @group Identifier */\n  readonly ISAN?: string\n  /** EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier @group Identifier */\n  readonly BarCode?: string\n  /** Library of Congress Control Number @group Identifier */\n  readonly LCCN?: string\n  /** Universal Media Identifier */\n  readonly UMID?: string\n  /** A label-specific catalogue number used to identify the release (e.g. TIC 01) @group Identifier */\n  readonly CatalogNumber?: string\n  /** Label code (e.g. 12345, meaning LC-12345) @group Identifier */\n  readonly LabelCode?: string\n  /** Owner of the file @group Legal */\n  readonly Owner?: string\n  /** Copyright attribution @group Legal */\n  readonly Copyright?: string\n  /** Link to a site with copyright/legal information @group Legal */\n  readonly Copyright_Url?: string\n  /** Copyright information as per the production copyright holder @group Legal */\n  readonly Producer_Copyright?: string\n  /** License information (e.g. All Rights Reserved, Any Use Permitted) @group Legal */\n  readonly TermsOfUse?: string\n  /** Name of assisted service @group Legal */\n  readonly ServiceName?: string\n  /** Channel of assisted service @group Legal */\n  readonly ServiceChannel?: string\n  /** URL of of assisted service @group Legal */\n  readonly Service_Url?: string\n  /** Provider of assisted service @group Legal */\n  readonly ServiceProvider?: string\n  /** URL of provider of assisted service @group Legal */\n  readonly ServiceProvider_Url?: string\n  /** Type of assisted service @group Legal */\n  readonly ServiceType?: string\n  /** Television network name @group Legal */\n  readonly NetworkName?: string\n  /** Television network name of original broadcast @group Legal */\n  readonly OriginalNetworkName?: string\n  /** Country information of the content @group Legal */\n  readonly Country?: string\n  /** Time zone information of the content @group Legal */\n  readonly TimeZone?: string\n  /** Is there a cover? Result will be \"Yes\" if present, empty if not @group Info */\n  readonly Cover?: string\n  /** Short description of cover image file (e.g. Earth in space) @group Info */\n  readonly Cover_Description?: string\n  /** Cover type (e.g. \"Cover (front)\") @group Info */\n  readonly Cover_Type?: string\n  /** MIME type of cover file (e.g. image/png) @group Info */\n  readonly Cover_Mime?: string\n  /** Cover, in binary format, encoded as Base64 @group Info */\n  readonly Cover_Data?: string\n  /** Text of a song @group Info */\n  readonly Lyrics?: string\n  /** Any comment related to the content @group Personal */\n  readonly Comment?: string\n  /** A numeric value defining how much a person likes the song/movie, 1 to 5 (e.g. 2, 5.0) @group Personal */\n  readonly Rating?: string\n  /** Date/year the item was added to the owners collection @group Personal */\n  readonly Added_Date?: string\n  /** Date the owner first played an item @group Personal */\n  readonly Played_First_Date?: string\n  /** Date the owner last played an item @group Personal */\n  readonly Played_Last_Date?: string\n  /** Number of times an item was played @group Personal */\n  readonly Played_Count?: number\n  /** Beginning position for Electronic Program Guide */\n  readonly EPG_Positions_Begin?: number\n  /** Ending position for Electronic Program Guide */\n  readonly EPG_Positions_End?: number\n}\n\nexport interface ImageTrack extends BaseTrack {\n  readonly '@type': 'Image'\n  /** Title of track */\n  readonly Title?: string\n  /** High Dynamic Range Format used */\n  readonly HDR_Format?: string\n  /** HDR Format used, along with version, profile, level, layers, settings, and compatibility information */\n  readonly HDR_Format_String?: string\n  /** Commercial name used by vendor for these HDR settings or HDR Format field if there is no difference */\n  readonly HDR_Format_Commercial?: string\n  /** Version of HDR Format */\n  readonly HDR_Format_Version?: string\n  /** Profile of HDR Format */\n  readonly HDR_Format_Profile?: string\n  /** Level of HDR Format */\n  readonly HDR_Format_Level?: string\n  /** HDR Format settings */\n  readonly HDR_Format_Settings?: string\n  /** HDR Format compatibility with commercial products (e.g. HDR10) */\n  readonly HDR_Format_Compatibility?: string\n  /** Order of bytes required for decoding. Options are Big/Little */\n  readonly Format_Settings_Endianness?: string\n  /** Data packing method used in DPX frames (e.g. Packed, Filled A, Filled B) */\n  readonly Format_Settings_Packing?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** Width of frame (trimmed to \"clean aperture\" size if present) in pixels, as integer (e.g. 1920) */\n  readonly Width?: number\n  /** Width of frame (trimmed to \"clean aperture\" size if present) in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_String?: string\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset?: number\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset_String?: string\n  /** Width of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_Original?: number\n  /** Width of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_Original_String?: string\n  /** Height of frame (including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_String?: string\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset?: number\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset_String?: string\n  /** Height of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_Original?: number\n  /** Height of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_Original_String?: string\n  /** Pixel Aspect ratio */\n  readonly PixelAspectRatio?: number\n  /** Pixel Aspect ratio */\n  readonly PixelAspectRatio_String?: string\n  /** Original (in the raw stream) Pixel Aspect ratio */\n  readonly PixelAspectRatio_Original?: number\n  /** Original (in the raw stream) Pixel Aspect ratio */\n  readonly PixelAspectRatio_Original_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** Width of frame, not considering black bars */\n  readonly Active_Width?: number\n  /** Width of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Active_Width_String?: string\n  /** Height of frame, not considering black bars */\n  readonly Active_Height?: number\n  /** Height of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Active_Height_String?: string\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio?: number\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio_String?: string\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Color information stored in the frame, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the frame, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Plot outline or a summary of the story */\n  readonly Summary?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  /** Presence of color description (Yes, No) */\n  readonly colour_description_present?: string\n  /** Presence of colour description (source) */\n  readonly colour_description_present_Source?: string\n  /** Presence of colour description (if incoherencies) */\n  readonly colour_description_present_Original?: string\n  /** Presence of colour description (source if incoherencies) */\n  readonly colour_description_present_Original_Source?: string\n  /** Color range for YUV color space */\n  readonly colour_range?: string\n  /** Colour range for YUV colour space (source) */\n  readonly colour_range_Source?: string\n  /** Colour range for YUV colour space (if incoherencies) */\n  readonly colour_range_Original?: string\n  /** Colour range for YUV colour space (source if incoherencies) */\n  readonly colour_range_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries */\n  readonly colour_primaries?: string\n  /** Chromaticity coordinates of the source primaries (source) */\n  readonly colour_primaries_Source?: string\n  /** Chromaticity coordinates of the source primaries (if incoherencies) */\n  readonly colour_primaries_Original?: string\n  /** Chromaticity coordinates of the source primaries (source if incoherencies) */\n  readonly colour_primaries_Original_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture */\n  readonly transfer_characteristics?: string\n  /** Opto-electronic transfer characteristic of the source picture (source) */\n  readonly transfer_characteristics_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture (if incoherencies) */\n  readonly transfer_characteristics_Original?: string\n  /** Opto-electronic transfer characteristic of the source picture (source if incoherencies) */\n  readonly transfer_characteristics_Original_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries */\n  readonly matrix_coefficients?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source) */\n  readonly matrix_coefficients_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (if incoherencies) */\n  readonly matrix_coefficients_Original?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source if incoherencies) */\n  readonly matrix_coefficients_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display */\n  readonly MasteringDisplay_ColorPrimaries?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source) */\n  readonly MasteringDisplay_ColorPrimaries_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original_Source?: string\n  /** Luminance of the mastering display */\n  readonly MasteringDisplay_Luminance?: string\n  /** Luminance of the mastering display (source) */\n  readonly MasteringDisplay_Luminance_Source?: string\n  /** Luminance of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original?: string\n  /** Luminance of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original_Source?: string\n  /** Maximum content light level */\n  readonly MaxCLL?: string\n  /** Maximum content light level (source) */\n  readonly MaxCLL_Source?: string\n  /** Maximum content light level (if incoherencies) */\n  readonly MaxCLL_Original?: string\n  /** Maximum content light level (source if incoherencies) */\n  readonly MaxCLL_Original_Source?: string\n  /** Maximum frame average light level */\n  readonly MaxFALL?: string\n  /** Maximum frame average light level (source) */\n  readonly MaxFALL_Source?: string\n  /** Maximum frame average light level (if incoherencies) */\n  readonly MaxFALL_Original?: string\n  /** Maximum frame average light level (source if incoherencies) */\n  readonly MaxFALL_Original_Source?: string\n}\n\nexport interface MenuTrack extends BaseTrack {\n  readonly '@type': 'Menu'\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Start time of stream, in UTC */\n  readonly Duration_Start?: number\n  /** End time of stream, in UTC */\n  readonly Duration_End?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Part of the file where the delay was set (e.g. Container, Stream, or empty) */\n  readonly Delay_Source?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** List of programs available */\n  readonly List_StreamKind?: string\n  /** List of programs available */\n  readonly List_StreamPos?: string\n  /** List of programs available */\n  readonly List?: string\n  /** List of programs available */\n  readonly List_String?: string\n  /** Name of this menu */\n  readonly Title?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Name of assisted service @group Legal */\n  readonly ServiceName?: string\n  /** Channel of assisted service @group Legal */\n  readonly ServiceChannel?: string\n  /** URL of assisted service @group Legal */\n  readonly Service_Url?: string\n  /** Provider of assisted service @group Legal */\n  readonly ServiceProvider?: string\n  /** URL of provider of assisted service @group Legal */\n  readonly ServiceProvider_Url?: string\n  /** Type of assisted service @group Legal */\n  readonly ServiceType?: string\n  /** Television network name @group Legal */\n  readonly NetworkName?: string\n  /** Television network name of original broadcast @group Legal */\n  readonly Original_NetworkName?: string\n  /** Country information of the content @group Legal */\n  readonly Countries?: string\n  /** TimeZone information of the content @group Legal */\n  readonly TimeZones?: string\n  /** Legal rating of a movie. Format depends on country of origin (e.g. PG, 16) @group Classification */\n  readonly LawRating?: string\n  /** Reason of the law rating @group Classification */\n  readonly LawRating_Reason?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Used by third-party developers to know about the beginning of the chapters list, to be used by Get (Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End */\n  readonly Chapters_Pos_Begin?: number\n  /** Used by third-party developers to know about the end of the chapters list (this position excluded) */\n  readonly Chapters_Pos_End?: number\n}\n\nexport interface OtherTrack extends BaseTrack {\n  readonly '@type': 'Other'\n  /** Type */\n  readonly Type?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** How this file is muxed in the container */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream in ms */\n  readonly Duration?: number\n  /** Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Duration_String?: string\n  /** Play time in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Duration_String1?: string\n  /** Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Duration_String2?: string\n  /** Play time in format : HH:MM:SS.MMM */\n  readonly Duration_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  readonly Duration_Start?: number\n  readonly Duration_End?: number\n  /** Source Play time of the stream, in ms */\n  readonly Source_Duration?: number\n  /** Source Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_String?: string\n  /** Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_String1?: string\n  /** Source Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_String2?: string\n  /** Source Play time in format : HH:MM:SS.MMM */\n  readonly Source_Duration_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Source Duration of the first frame if it is longer than others, in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Source Duration of the last frame if it is longer than others, in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode (VBR, CBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode (Variable, Cconstant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate in bps */\n  readonly BitRate?: number\n  /** Bit rate (with measurement) */\n  readonly BitRate_String?: string\n  /** Minimum Bit rate in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum Bit rate (with measurement) */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal Bit rate in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal Bit rate (with measurement) */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum Bit rate in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum Bit rate (with measurement) */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded (with forced padding) bit rate in bps, if some container padding is present */\n  readonly BitRate_Encoded?: number\n  /** Encoded (with forced padding) bit rate (with measurement), if some container padding is present */\n  readonly BitRate_Encoded_String?: string\n  /** Frames per second */\n  readonly FrameRate?: number\n  /** Frames per second (with measurement) */\n  readonly FrameRate_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Den?: number\n  /** Number of frames */\n  readonly FrameCount?: number\n  /** Source Number of frames */\n  readonly Source_FrameCount?: number\n  /** Delay fixed in the stream (relative) IN MS */\n  readonly Delay?: number\n  /** Delay with measurement */\n  readonly Delay_String?: string\n  /** Delay with measurement */\n  readonly Delay_String1?: string\n  /** Delay with measurement */\n  readonly Delay_String2?: string\n  /** Delay in format : HH:MM:SS.MMM */\n  readonly Delay_String3?: string\n  /** Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Delay source (Container or Stream or empty) */\n  readonly Delay_Source?: string\n  /** Delay source (Container or Stream or empty) */\n  readonly Delay_Source_String?: string\n  /** Delay fixed in the raw stream (relative) IN MS */\n  readonly Delay_Original?: number\n  /** Delay with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay in format: HH:MM:SS.MMM */\n  readonly Delay_Original_String3?: string\n  /** Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame info */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (Stream or empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream (absolute / video) */\n  readonly Video_Delay?: number\n  readonly Video_Delay_String?: string\n  readonly Video_Delay_String1?: string\n  readonly Video_Delay_String2?: string\n  readonly Video_Delay_String3?: string\n  readonly Video_Delay_String4?: string\n  readonly Video_Delay_String5?: string\n  /** TimeStamp fixed in the stream (relative) IN MS */\n  readonly TimeStamp_FirstFrame?: number\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String?: string\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String1?: string\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String2?: string\n  /** TimeStamp in format : HH:MM:SS.MMM */\n  readonly TimeStamp_FirstFrame_String3?: string\n  /** TimeStamp in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly TimeStamp_FirstFrame_String4?: string\n  /** TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String5?: string\n  /** Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code of the last frame (excluding the duration of the last frame) in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format */\n  readonly TimeCode_LastFrame?: string\n  /** Delay drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code is Stripped (only 1st time code, no discontinuity) */\n  readonly TimeCode_Stripped?: string\n  /** Time code is Stripped (only 1st time code, no discontinuity) */\n  readonly TimeCode_Stripped_String?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) */\n  readonly TimeCode_Source?: string\n  /** Streamsize in bytes */\n  readonly StreamSize?: number\n  /** Streamsize in with percentage value */\n  readonly StreamSize_String?: string\n  readonly StreamSize_String1?: string\n  readonly StreamSize_String2?: string\n  readonly StreamSize_String3?: string\n  readonly StreamSize_String4?: string\n  /** Streamsize in with percentage value */\n  readonly StreamSize_String5?: string\n  /** Stream size divided by file size */\n  readonly StreamSize_Proportion?: string\n  /** StreamSize in bytes of hte stream after demux */\n  readonly StreamSize_Demuxed?: number\n  /** StreamSize_Demuxed in with percentage value */\n  readonly StreamSize_Demuxed_String?: string\n  readonly StreamSize_Demuxed_String1?: string\n  readonly StreamSize_Demuxed_String2?: string\n  readonly StreamSize_Demuxed_String3?: string\n  readonly StreamSize_Demuxed_String4?: string\n  /** StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Source Streamsize in bytes */\n  readonly Source_StreamSize?: number\n  /** Source Streamsize in with percentage value */\n  readonly Source_StreamSize_String?: string\n  readonly Source_StreamSize_String1?: string\n  readonly Source_StreamSize_String2?: string\n  readonly Source_StreamSize_String3?: string\n  readonly Source_StreamSize_String4?: string\n  /** Source Streamsize in with percentage value */\n  readonly Source_StreamSize_String5?: string\n  /** Source Stream size divided by file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Encoded Streamsize in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Encoded Streamsize in with percentage value */\n  readonly StreamSize_Encoded_String?: string\n  readonly StreamSize_Encoded_String1?: string\n  readonly StreamSize_Encoded_String2?: string\n  readonly StreamSize_Encoded_String3?: string\n  readonly StreamSize_Encoded_String4?: string\n  /** Encoded Streamsize in with percentage value */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Source Encoded Streamsize in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Source Encoded Streamsize in with percentage value */\n  readonly Source_StreamSize_Encoded_String?: string\n  readonly Source_StreamSize_Encoded_String1?: string\n  readonly Source_StreamSize_Encoded_String2?: string\n  readonly Source_StreamSize_Encoded_String3?: string\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Source Encoded Streamsize in with percentage value */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** Name of this menu */\n  readonly Title?: string\n  /** Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) */\n  readonly Language?: string\n  /** Language (full) */\n  readonly Language_String?: string\n  /** Language (full) */\n  readonly Language_String1?: string\n  /** Language (2-letter ISO 639-1 if exists, else empty) */\n  readonly Language_String2?: string\n  /** Language (3-letter ISO 639-2 if exists, else empty) */\n  readonly Language_String3?: string\n  /** Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) */\n  readonly Language_String4?: string\n  /** More info about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Service kind, e.g. visually impaired, commentary, voice over */\n  readonly ServiceKind?: string\n  /** Service kind (full) */\n  readonly ServiceKind_String?: string\n  /** Set if that track should not be used */\n  readonly Disabled?: string\n  /** Set if that track should not be used */\n  readonly Disabled_String?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Default?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Default_String?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Forced?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n}\n\nexport interface TextTrack extends BaseTrack {\n  readonly '@type': 'Text'\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream, in ms */\n  readonly Duration?: number\n  /** Play time of the stream in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time of the stream in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time of the stream in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time of the stream in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time of the stream in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time  of the streamin format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Play time from first display to last display, in ms */\n  readonly Duration_Start2End?: number\n  /** Play time from first display to last display in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start2End_String?: string\n  /** Play time from first display to last display in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start2End_String1?: string\n  /** Play time from first display to last display in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start2End_String2?: string\n  /** Play time from first display to last display in format HH:MM:SS.mmm */\n  readonly Duration_Start2End_String3?: string\n  /** Play time from first display to last display in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start2End_String4?: string\n  /** Play time from first display to last display in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start2End_String5?: string\n  /** Timestamp of first command, in ms */\n  readonly Duration_Start_Command?: number\n  /** Timestamp of first command in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start_Command_String?: string\n  /** Timestamp of first command in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start_Command_String1?: string\n  /** Timestamp of first command in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start_Command_String2?: string\n  /** Timestamp of first command in format HH:MM:SS.mmm */\n  readonly Duration_Start_Command_String3?: string\n  /** Timestamp of first command in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start_Command_String4?: string\n  /** Timestamp of first command in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start_Command_String5?: string\n  /** Timestamp of first display, in ms */\n  readonly Duration_Start?: number\n  /** Timestamp of first display in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start_String?: string\n  /** Timestamp of first display in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start_String1?: string\n  /** Timestamp of first display in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start_String2?: string\n  /** Timestamp of first display in format HH:MM:SS.mmm */\n  readonly Duration_Start_String3?: string\n  /** Timestamp of first display in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start_String4?: string\n  /** Timestamp of first display in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start_String5?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration_End?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_End_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_End_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_End_String2?: string\n  /** Play time in format HH:MM:SS.mmm */\n  readonly Duration_End_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_End_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_End_String5?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration_End_Command?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_End_Command_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_End_Command_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_End_Command_String2?: string\n  /** Play time in format HH:MM:SS.mmm */\n  readonly Duration_End_Command_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_End_Command_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_End_Command_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Temporal coordinate system used for timestamps */\n  readonly Duration_Base?: string\n  /** Duration of content stored in the file (if different than duration), in ms */\n  readonly Source_Duration?: number\n  /** Duration of content stored in the file (if different than duration), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of content stored in the file (if different than duration), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of content stored in the file (if different than duration), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames),in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** \"Width of frame (trimmed to \"\"clean aperture\"\" size if present) in characters\" */\n  readonly Width?: number\n  /** \"Width of frame (trimmed to \"\"clean aperture\"\" size if present) in characters, presented in SI unit digit spacing style, with measurement\" */\n  readonly Width_String?: string\n  /** Height of frame (including aperture size if present) in characters */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in characters, present in SI unit digit spacing style, with measurement */\n  readonly Height_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode_Original?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_Original_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Minimum frames per second (e.g. 25.000) */\n  readonly FrameRate_Minimum?: number\n  /** Minimum frames per second, with measurement (e.g. 25.000 FPS) */\n  readonly FrameRate_Minimum_String?: string\n  /** Frames per second rounded to closest standard (e.g. 29.97) */\n  readonly FrameRate_Nominal?: number\n  /** Frames per second rounded to closest standard, with measurement (e.g. 29.97 fps) */\n  readonly FrameRate_Nominal_String?: string\n  /** Maximum frames per second */\n  readonly FrameRate_Maximum?: number\n  /** Maximum frames per second, with measurement */\n  readonly FrameRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate_Original?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_Original_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Original_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Original_Den?: number\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** Number of displayed elements */\n  readonly ElementCount?: number\n  /** Number of frames according to media header (media/stts atom) data */\n  readonly Source_FrameCount?: number\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Color information stored in the video frames, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the video frames, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream relative to video, in ms (e.g. -80) */\n  readonly Video_Delay?: number\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String1?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String2?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (e.g. -00:00:00.080) */\n  readonly Video_Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Video_Delay_String4?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Video_Delay_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** Maximum frame number in time codes */\n  readonly TimeCode_MaxFrameNumber?: string\n  /** Theoritical maximum frame number in time codes */\n  readonly TimeCode_MaxFrameNumber_Theory?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** Title of file */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** \"Name of the software package used to create the file, in the format \"\"CompanyName ProductName (OperatingSystem) Version (Date)\"\"\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** \"Software used to create the file, in the format \"\"CompanyName ProductName (OperatingSystem) Version (Date)\"\"\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Plot outline or a summary of the story */\n  readonly Summary?: string\n  /** Time/date/year that the encoding of this content was completed @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time/date/year that the tags were added to this content @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  readonly Events_Total?: string\n  /** Minimum duration per event, in ms */\n  readonly Events_MinDuration?: number\n  /** Minimum duration per event in format XXx YYy, with YYy value omitted if zero */\n  readonly Events_MinDuration_String?: string\n  /** Minimum duration per event in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Events_MinDuration_String1?: string\n  /** Minimum duration per event in format XXx YYy, with YYy omitted if value is zero */\n  readonly Events_MinDuration_String2?: string\n  /** Minimum duration per event in format HH:MM:SS.mmm */\n  readonly Events_MinDuration_String3?: string\n  /** Minimum duration per event in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Events_MinDuration_String4?: string\n  /** Minimum duration per event in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Events_MinDuration_String5?: string\n  readonly Events_PopOn?: string\n  readonly Events_RollUp?: string\n  readonly Events_PaintOn?: string\n  readonly Lines_Count?: string\n  readonly Lines_MaxCountPerEvent?: number\n  readonly Lines_MaxCharacterCount?: number\n  readonly FirstDisplay_Delay_Frames?: string\n  readonly FirstDisplay_Type?: string\n}\n\nexport interface VideoTrack extends BaseTrack {\n  readonly '@type': 'Video'\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Tier of the Format */\n  readonly Format_Tier?: string\n  /** Profile of the base stream for Multiview Video Coding */\n  readonly MultiView_BaseProfile?: string\n  /** View count for Multiview Video Coding */\n  readonly MultiView_Count?: string\n  /** How views are muxed in the container for Multiview Video Coding */\n  readonly MultiView_Layout?: string\n  /** High Dynamic Range Format used */\n  readonly HDR_Format?: string\n  /** HDR Format used, along with version, profile, level, layers, settings, and compatibility information */\n  readonly HDR_Format_String?: string\n  /** Commercial name used by vendor for these HDR settings or HDR Format field if there is no difference */\n  readonly HDR_Format_Commercial?: string\n  /** Version of HDR Format */\n  readonly HDR_Format_Version?: string\n  /** Profile of HDR Format */\n  readonly HDR_Format_Profile?: string\n  /** Level of HDR Format */\n  readonly HDR_Format_Level?: string\n  /** HDR Format settings */\n  readonly HDR_Format_Settings?: string\n  /** Compression format of HDR Format */\n  readonly HDR_Format_Compression?: string\n  /** HDR Format compatibility with commercial products (e.g. HDR10) */\n  readonly HDR_Format_Compatibility?: string\n  /** Whether BVOP settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_BVOP?: string\n  /** Whether BVOP settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_BVOP_String?: string\n  /** Whether Quarter-pixel motion settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_QPel?: string\n  /** Whether Quarter-pixel motion settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_QPel_String?: string\n  /** Whether Global Motion Compensation settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_GMC?: number\n  /** Whether Global Motion Compensation settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_GMC_String?: string\n  /** Whether Matrix settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_Matrix?: string\n  /** Whether Matrix settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_Matrix_String?: string\n  /** Matrix data, in base64-encoded binary format. Order: intra, non-intra, gray intra, gray non-intra */\n  readonly Format_Settings_Matrix_Data?: string\n  /** Whether CABAC support is required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_CABAC?: string\n  /** Whether CABAC support is  required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_CABAC_String?: string\n  /** Whether reference frames settings are required for decoding AVC (Yes, No) */\n  readonly Format_Settings_RefFrames?: number\n  /** Whether reference frames settings are required for decoding AVC (Yes, No) */\n  readonly Format_Settings_RefFrames_String?: string\n  /** Pulldown method (for film transferred to video) */\n  readonly Format_Settings_Pulldown?: string\n  /** Order of bytes required for decoding (Big, Little) */\n  readonly Format_Settings_Endianness?: string\n  /** Data packing method used in DPX frames (e.g. Packed, Filled A, Filled B) */\n  readonly Format_Settings_Packing?: string\n  /** Frame mode for decoding (e.g. Frame doubling, Frame tripling) */\n  readonly Format_Settings_FrameMode?: string\n  /** GOP method set for format (e.g. N=1, Variable) */\n  readonly Format_Settings_GOP?: string\n  /** Picture structure method set for format (e.g. Frame, Field) */\n  readonly Format_Settings_PictureStructure?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Numer of slices per frame */\n  readonly Format_Settings_SliceCount?: number\n  /** Numer of slices per frame */\n  readonly Format_Settings_SliceCount_String?: string\n  /** Internet Media Type a.k.a. MIME Type, Content-Type */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Duration of the file, of content stored in the file, in ms */\n  readonly Source_Duration?: number\n  /** Duration of the file, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of the file, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of the file, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame, of content stored in the file, in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame, of content stored in the file, in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, as integer (e.g. 1920) */\n  readonly Width?: number\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_String?: string\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset?: number\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset_String?: string\n  /** Width of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_Original?: number\n  /** Width of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_Original_String?: string\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_CleanAperture?: number\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_CleanAperture_String?: string\n  /** Height of frame (including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_String?: string\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset?: number\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset_String?: string\n  /** Height of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_Original?: number\n  /** Height of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_Original_String?: string\n  /** Height of frame (trimmed to clean aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_CleanAperture?: number\n  /** Height of frame (trimmed to clean aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 800 pixels) */\n  readonly Height_CleanAperture_String?: string\n  /** Width of frame, considering data stored in the codec */\n  readonly Stored_Width?: number\n  /** Height of frame, considering data stored in the codec */\n  readonly Stored_Height?: number\n  /** Width of frame, from data derived from video stream */\n  readonly Sampled_Width?: number\n  /** Height of frame, from data derived from video stream */\n  readonly Sampled_Height?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422) */\n  readonly PixelAspectRatio?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422) */\n  readonly PixelAspectRatio_String?: string\n  /** Width of a pixel as compared to the height (e.g. 1.422). This field is only shown if the container and codec values are different */\n  readonly PixelAspectRatio_Original?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422). This field is only shown if the container and codec values are different */\n  readonly PixelAspectRatio_Original_String?: string\n  /** Width of a pixel as compared to the height, considering clean aperture dimensions (e.g. 1.422). This field is only shown if the values are different */\n  readonly PixelAspectRatio_CleanAperture?: number\n  /** Width of a pixel as compared to the height, considering clean aperture dimensions (e.g. 1.422). This field is only shown if the values are different */\n  readonly PixelAspectRatio_CleanAperture_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** The proportional relationship between the width and height of a frame, considering clean aperture dimensions (e.g. 4:3) */\n  readonly DisplayAspectRatio_CleanAperture?: number\n  /** The proportional relationship between the width and height of a frame, considering clean aperture dimensions (e.g. 4:3) */\n  readonly DisplayAspectRatio_CleanAperture_String?: string\n  /** Active Format Description, as value code (e.g. 001) */\n  readonly ActiveFormatDescription?: string\n  /** Active Format Description, as text (e.g. 4:3) */\n  readonly ActiveFormatDescription_String?: string\n  /** Muxing mode used for Active Format Description (AFD value). Options are A/53 (for Raw) or SMPTE ST 2016-3 (for Ancillary) */\n  readonly ActiveFormatDescription_MuxingMode?: string\n  /** Width of frame, not considering black bars */\n  readonly Active_Width?: number\n  /** Width of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Active_Width_String?: string\n  /** Height of frame, not considering black bars */\n  readonly Active_Height?: number\n  /** Height of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Active_Height_String?: string\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio?: number\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio_String?: string\n  /** Rotation of video, derived from track header data, in degrees */\n  readonly Rotation?: string\n  /** Rotation of video, derived from track header data, in degrees */\n  readonly Rotation_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Original frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode_Original?: string\n  /** Original frame rate mode, as word (Constant, Variable) */\n  readonly FrameRate_Mode_Original_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Minimum frames per second (e.g. 25.000) */\n  readonly FrameRate_Minimum?: number\n  /** Minimum frames per second, with measurement (e.g. 25.000 FPS) */\n  readonly FrameRate_Minimum_String?: string\n  /** Frames per second rounded to closest standard (e.g. 24.98) */\n  readonly FrameRate_Nominal?: number\n  /** Frames per second rounded to closest standard, with measurement (e.g. 29.97 fps) */\n  readonly FrameRate_Nominal_String?: string\n  /** Maximum frames per second */\n  readonly FrameRate_Maximum?: number\n  /** Maximum frames per second, with measurement */\n  readonly FrameRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate_Original?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_Original_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Original_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Original_Den?: number\n  /** Real (capture) frames per second */\n  readonly FrameRate_Real?: number\n  /** Real (capture) frames per second (with measurement) */\n  readonly FrameRate_Real_String?: string\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** Number of frames according to media header (media/stts atom) data */\n  readonly Source_FrameCount?: number\n  /** Either the NTSC or PAL color encoding system, as stored in the content */\n  readonly Standard?: string\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling_String?: string\n  /** Position type of chroma subsampling */\n  readonly ChromaSubsampling_Position?: string\n  /** Color information stored in the video frames, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the video frames, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Way in which lines of video are displayed (e.g. Progressive) */\n  readonly ScanType?: string\n  /** Way in which lines of video are displayed (e.g. Progressive) */\n  readonly ScanType_String?: string\n  /** Way in which lines of video are encoded (e.g. Progressive) */\n  readonly ScanType_Original?: string\n  /** Way in which lines of video are encoded (e.g. Progressive) */\n  readonly ScanType_Original_String?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanType_StoreMethod?: string\n  /** Count of fields per container block */\n  readonly ScanType_StoreMethod_FieldsPerBlock?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanType_StoreMethod_String?: string\n  /** Order in which lines are encoded, as acronym (e.g. TFF) */\n  readonly ScanOrder?: string\n  /** Order in which lines are encoded, as acronym (e.g. TFF) */\n  readonly ScanOrder_String?: string\n  /** Stored ScanOrder, displayed when the stored order is not same as the display order */\n  readonly ScanOrder_Stored?: string\n  /** Stored ScanOrder, displayed when the stored order is not same as the display order */\n  readonly ScanOrder_Stored_String?: string\n  /** Field is set to Yes when display and stored orders are inverted */\n  readonly ScanOrder_StoredDisplayedInverted?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanOrder_Original?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanOrder_Original_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Bits divided by Pixel multiplied by Frame */\n  readonly 'Bits-Pixel_Frame'?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Timestamp fixed in the stream (relative), in ms */\n  readonly TimeStamp_FirstFrame?: number\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String?: string\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String1?: string\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String2?: string\n  /** Timestamp in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String3?: string\n  /** Timestamp in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeStamp_FirstFrame_String4?: string\n  /** Timestamp in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** Time code information about Open/Closed GOP */\n  readonly Gop_OpenClosed?: string\n  /** Time code information about Open/Closed GOP */\n  readonly Gop_OpenClosed_String?: string\n  /** Time code information about Open/Closed of first frame if GOP is Open for the other GOPs */\n  readonly Gop_OpenClosed_FirstFrame?: string\n  /** Time code information about Open/Closed of first frame if GOP is Open for the other GOPs */\n  readonly Gop_OpenClosed_FirstFrame_String?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment_String?: string\n  /** Title of track */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  /** The minimum size of the buffer needed to decode the sequence */\n  readonly BufferSize?: string\n  /** Presence of color description (Yes, No) */\n  readonly colour_description_present?: string\n  /** Presence of colour description (source) */\n  readonly colour_description_present_Source?: string\n  /** Presence of colour description (if incoherencies) */\n  readonly colour_description_present_Original?: string\n  /** Presence of colour description (source if incoherencies) */\n  readonly colour_description_present_Original_Source?: string\n  /** Color range for YUV color space */\n  readonly colour_range?: string\n  /** Colour range for YUV colour space (source) */\n  readonly colour_range_Source?: string\n  /** Colour range for YUV colour space (if incoherencies) */\n  readonly colour_range_Original?: string\n  /** Colour range for YUV colour space (source if incoherencies) */\n  readonly colour_range_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries */\n  readonly colour_primaries?: string\n  /** Chromaticity coordinates of the source primaries (source) */\n  readonly colour_primaries_Source?: string\n  /** Chromaticity coordinates of the source primaries (if incoherencies) */\n  readonly colour_primaries_Original?: string\n  /** Chromaticity coordinates of the source primaries (source if incoherencies) */\n  readonly colour_primaries_Original_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture */\n  readonly transfer_characteristics?: string\n  /** Opto-electronic transfer characteristic of the source picture (source) */\n  readonly transfer_characteristics_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture (if incoherencies) */\n  readonly transfer_characteristics_Original?: string\n  /** Opto-electronic transfer characteristic of the source picture (source if incoherencies) */\n  readonly transfer_characteristics_Original_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries */\n  readonly matrix_coefficients?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source) */\n  readonly matrix_coefficients_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (if incoherencies) */\n  readonly matrix_coefficients_Original?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source if incoherencies) */\n  readonly matrix_coefficients_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display */\n  readonly MasteringDisplay_ColorPrimaries?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source) */\n  readonly MasteringDisplay_ColorPrimaries_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original_Source?: string\n  /** Luminance of the mastering display */\n  readonly MasteringDisplay_Luminance?: string\n  /** Luminance of the mastering display (source) */\n  readonly MasteringDisplay_Luminance_Source?: string\n  /** Luminance of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original?: string\n  /** Luminance of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original_Source?: string\n  /** Maximum content light level */\n  readonly MaxCLL?: string\n  /** Maximum content light level (source) */\n  readonly MaxCLL_Source?: string\n  /** Maximum content light level (if incoherencies) */\n  readonly MaxCLL_Original?: string\n  /** Maximum content light level (source if incoherencies) */\n  readonly MaxCLL_Original_Source?: string\n  /** Maximum frame average light level */\n  readonly MaxFALL?: string\n  /** Maximum frame average light level (source) */\n  readonly MaxFALL_Source?: string\n  /** Maximum frame average light level (if incoherencies) */\n  readonly MaxFALL_Original?: string\n  /** Maximum frame average light level (source if incoherencies) */\n  readonly MaxFALL_Original_Source?: string\n}\n\nexport type Track =\n  | GeneralTrack\n  | VideoTrack\n  | AudioTrack\n  | TextTrack\n  | ImageTrack\n  | MenuTrack\n  | OtherTrack\n\nexport interface Media {\n  readonly '@ref': string\n  readonly track: Track[]\n}\n\nexport interface MediaInfoResult {\n  readonly creatingApplication?: CreationInfo\n  readonly creatingLibrary?: CreationInfo\n  readonly media?: Media\n}\n","import { unknownToError } from './error.js'\nimport { FLOAT_FIELDS, INT_FIELDS, type MediaInfoResult, type Track } from './MediaInfoResult.js'\nimport type { MediaInfoFactoryOptions } from './mediaInfoFactory.js'\nimport type { MediaInfoModule, MediaInfoWasmInterface } from './MediaInfoModule.js'\n\nconst MAX_UINT32_PLUS_ONE = 2 ** 32\n\n/** Format of the result type */\ntype FormatType = 'object' | 'JSON' | 'XML' | 'HTML' | 'text'\n\ntype MediaInfoOptions<TFormat extends FormatType> = Required<\n  Omit<MediaInfoFactoryOptions<TFormat>, 'locateFile'>\n>\n\ntype SizeArg = (() => Promise<number> | number) | number\n\ntype ReadChunkFunc = (size: number, offset: number) => Promise<Uint8Array> | Uint8Array\n\ninterface ResultMap {\n  object: MediaInfoResult\n  JSON: string\n  XML: string\n  HTML: string\n  text: string\n}\n\nconst FORMAT_CHOICES = ['JSON', 'XML', 'HTML', 'text'] as const\n\nconst DEFAULT_OPTIONS = {\n  coverData: false,\n  chunkSize: 256 * 1024,\n  format: 'object',\n  full: false,\n} as const\n\ntype ResultCallback<TFormat extends FormatType> = (\n  result: ResultMap[TFormat] | null,\n  err?: unknown\n) => void\n\n/**\n * Wrapper for the MediaInfoLib WASM module.\n *\n * This class should not be instantiated directly. Use the {@link mediaInfoFactory} function\n * to create instances of `MediaInfo`.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n */\nclass MediaInfo<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format> {\n  private readonly mediainfoModule: MediaInfoModule\n  private readonly mediainfoModuleInstance: MediaInfoWasmInterface\n\n  /** @group General Use */\n  readonly options: MediaInfoOptions<TFormat>\n\n  /**\n   * The constructor should not be called directly, instead use {@link mediaInfoFactory}.\n   *\n   * @hidden\n   * @param mediainfoModule WASM module\n   * @param options User options\n   */\n  constructor(mediainfoModule: MediaInfoModule, options: MediaInfoOptions<TFormat>) {\n    this.mediainfoModule = mediainfoModule\n    this.options = options\n\n    // Instantiate\n    this.mediainfoModuleInstance = new mediainfoModule.MediaInfo(\n      options.format === 'object' ? 'JSON' : options.format,\n      options.coverData,\n      options.full\n    )\n  }\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc): Promise<ResultMap[TFormat]>\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @param callback Function that is called once the processing is done\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc, callback: ResultCallback<TFormat>): void\n\n  analyzeData(\n    size: SizeArg,\n    readChunk: ReadChunkFunc,\n    callback?: ResultCallback<TFormat>\n  ): Promise<ResultMap[TFormat] | null> | undefined {\n    // Support promise signature\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        const resultCb: ResultCallback<TFormat> = (result, error) => {\n          if (error || !result) {\n            reject(unknownToError(error))\n          } else {\n            resolve(result)\n          }\n        }\n        this.analyzeData(size, readChunk, resultCb)\n      })\n    }\n\n    const finalize = () => {\n      this.openBufferFinalize()\n      const result = this.inform()\n      if (this.options.format === 'object') {\n        callback(this.parseResultJson(result))\n      } else {\n        callback(result)\n      }\n    }\n\n    let offset = 0\n    const runReadDataLoop = (fileSize: number) => {\n      const readNextChunk = (data: Uint8Array) => {\n        if (continueBuffer(data)) {\n          getChunk()\n        } else {\n          finalize()\n        }\n      }\n\n      const getChunk = () => {\n        let dataValue\n        try {\n          const safeSize = Math.min(this.options.chunkSize, fileSize - offset)\n          dataValue = readChunk(safeSize, offset)\n        } catch (error: unknown) {\n          callback('', unknownToError(error))\n          return\n        }\n\n        if (dataValue instanceof Promise) {\n          dataValue.then(readNextChunk).catch((error: unknown) => {\n            callback('', unknownToError(error))\n          })\n        } else {\n          readNextChunk(dataValue)\n        }\n      }\n\n      const continueBuffer = (data: Uint8Array): boolean => {\n        if (data.length === 0 || this.openBufferContinue(data, data.length)) {\n          return false\n        }\n        const seekTo: number = this.openBufferContinueGotoGet()\n        if (seekTo === -1) {\n          offset += data.length\n        } else {\n          offset = seekTo\n          this.openBufferInit(fileSize, seekTo)\n        }\n        return true\n      }\n\n      this.openBufferInit(fileSize, offset)\n      getChunk()\n    }\n\n    const fileSizeValue = size instanceof Function ? size() : size\n\n    if (fileSizeValue instanceof Promise) {\n      fileSizeValue.then(runReadDataLoop).catch((error: unknown) => {\n        callback(null, unknownToError(error))\n      })\n    } else {\n      runReadDataLoop(fileSizeValue)\n    }\n  }\n\n  /**\n   * Close the MediaInfoLib WASM instance.\n   *\n   * @group General Use\n   */\n  close(): void {\n    if (typeof this.mediainfoModuleInstance.close === 'function') {\n      this.mediainfoModuleInstance.close()\n    }\n    if (typeof this.mediainfoModule.destroy === 'function') {\n      this.mediainfoModule.destroy(this.mediainfoModuleInstance)\n    }\n  }\n\n  /**\n   * Receive result data from the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Result data (format can be configured in options)\n   * @group Low-level\n   */\n  inform(): string {\n    return this.mediainfoModuleInstance.inform()\n  }\n\n  /**\n   * Send more data to the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param data Data buffer\n   * @param size Buffer size\n   * @returns Processing state: `0` (no bits set) = not finished, Bit `0` set = enough data read for providing information\n   * @group Low-level\n   */\n  openBufferContinue(data: Uint8Array, size: number): boolean {\n    // bit 3 set -> done\n    return !!(this.mediainfoModuleInstance.open_buffer_continue(data, size) & 0x08)\n  }\n\n  /**\n   * Retrieve seek position from WASM instance.\n   * The MediaInfoLib function `Open_Buffer_GoTo` returns an integer with 64 bit precision.\n   * It would be cut at 32 bit due to the JavaScript bindings. Here we transport the low and high\n   * parts separately and put them together.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Seek position (where MediaInfoLib wants go in the data buffer)\n   * @group Low-level\n   */\n  openBufferContinueGotoGet(): number {\n    // JS bindings don't support 64 bit int\n    // https://github.com/buzz/mediainfo.js/issues/11\n    let seekTo = -1\n    const seekToLow: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_lower()\n    const seekToHigh: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_upper()\n    if (seekToLow == -1 && seekToHigh == -1) {\n      seekTo = -1\n    } else if (seekToLow < 0) {\n      seekTo = seekToLow + MAX_UINT32_PLUS_ONE + seekToHigh * MAX_UINT32_PLUS_ONE\n    } else {\n      seekTo = seekToLow + seekToHigh * MAX_UINT32_PLUS_ONE\n    }\n    return seekTo\n  }\n\n  /**\n   * Inform MediaInfoLib that no more data is being read.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @group Low-level\n   */\n  openBufferFinalize(): void {\n    this.mediainfoModuleInstance.open_buffer_finalize()\n  }\n\n  /**\n   * Prepare MediaInfoLib to process a data buffer.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param size Expected buffer size\n   * @param offset Buffer offset\n   * @group Low-level\n   */\n  openBufferInit(size: number, offset: number): void {\n    this.mediainfoModuleInstance.open_buffer_init(size, offset)\n  }\n\n  /**\n   * Parse result JSON. Convert integer/float fields.\n   *\n   * @param result Serialized JSON from MediaInfo\n   * @returns Parsed JSON object\n   */\n  private parseResultJson(resultString: string): ResultMap[TFormat] {\n    type Writable<T> = { -readonly [P in keyof T]: T[P] }\n\n    const intFields = INT_FIELDS as readonly string[]\n    const floatFields = FLOAT_FIELDS as readonly string[]\n\n    // Parse JSON\n    const result = JSON.parse(resultString) as MediaInfoResult\n\n    if (result.media) {\n      const newMedia = { ...result.media, track: [] as Writable<Track>[] }\n\n      if (Array.isArray(result.media.track)) {\n        for (const track of result.media.track) {\n          let newTrack: Writable<Track> = { '@type': track['@type'] }\n          for (const [key, val] of Object.entries(track) as [string, unknown][]) {\n            if (key === '@type') {\n              continue\n            }\n            if (typeof val === 'string' && intFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseInt(val, 10) }\n            } else if (typeof val === 'string' && floatFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseFloat(val) }\n            } else {\n              newTrack = { ...newTrack, [key]: val }\n            }\n          }\n          newMedia.track.push(newTrack)\n        }\n      }\n\n      return { ...result, media: newMedia } as ResultMap[TFormat]\n    }\n\n    return result as ResultMap[TFormat]\n  }\n}\n\nexport type { FormatType, ReadChunkFunc, ResultMap, SizeArg }\nexport { DEFAULT_OPTIONS, FORMAT_CHOICES }\nexport default MediaInfo\n","import MediaInfo, { DEFAULT_OPTIONS, type FormatType } from './MediaInfo.js'\nimport mediaInfoModuleFactory, { type MediaInfoModule } from './MediaInfoModule.js'\n\ninterface MediaInfoFactoryOptions<TFormat extends FormatType> {\n  /** Output cover data as base64 */\n  coverData?: boolean\n\n  /** Chunk size used by `analyzeData` (in bytes) */\n  chunkSize?: number\n\n  /** Result format (`object`, `JSON`, `XML`, `HTML` or `text`) */\n  format?: TFormat\n\n  /** Full information display (all internal tags) */\n  full?: boolean\n\n  /**\n   * This method will be called before loading the WASM file. It should return the actual URL to\n   * `MediaInfoModule.wasm`.\n   *\n   * @see https://emscripten.org/docs/api_reference/module.html#Module.locateFile\n   */\n  locateFile?: (path: string, prefix: string) => string\n}\n\nconst noopPrint = () => {\n  // No-op\n}\n\ntype FactoryCallback<TFormat extends FormatType> = (mediainfo: MediaInfo<TFormat>) => void\ntype ErrorCallback = (error: unknown) => void\n\nfunction defaultLocateFile(path: string, prefix: string) {\n  try {\n    const url = new URL(prefix)\n    if (url.pathname === '/') {\n      return `${prefix}mediainfo.js/dist/${path}`\n    }\n  } catch {\n    // empty\n  }\n  return `${prefix}../${path}`\n}\n\n// TODO pass through more emscripten module options?\n\n/**\n * Creates a {@link MediaInfo} instance with the specified options.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n * @param options - Configuration options for creating the {@link MediaInfo} instance.\n * @returns A promise that resolves to a {@link MediaInfo} instance when no callback is provided.\n */\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options?: MediaInfoFactoryOptions<TFormat>\n): Promise<MediaInfo<TFormat>>\n\n/**\n * Creates a {@link MediaInfo} instance with the specified options and executes the callback.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n * @param options - Configuration options for creating the {@link MediaInfo} instance.\n * @param callback - Function to call with the {@link MediaInfo} instance.\n * @param errCallback - Optional function to call on error.\n */\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat>,\n  callback: FactoryCallback<TFormat>,\n  errCallback?: ErrorCallback\n): void\n\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat> = {},\n  callback?: FactoryCallback<TFormat>,\n  errCallback?: ErrorCallback\n): Promise<MediaInfo<TFormat>> | undefined {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      mediaInfoFactory(options, resolve, reject)\n    })\n  }\n\n  const { locateFile, ...mergedOptions } = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    format: (options.format ?? DEFAULT_OPTIONS.format) as TFormat,\n  }\n\n  const mediaInfoModuleFactoryOpts: Partial<MediaInfoModule> = {\n    // Silence all print in module\n    print: noopPrint,\n    printErr: noopPrint,\n\n    locateFile: locateFile ?? defaultLocateFile,\n    onAbort: (err: Error) => {\n      if (errCallback) {\n        errCallback(err)\n      }\n    },\n  }\n\n  // Fetch and load WASM module\n  mediaInfoModuleFactory(mediaInfoModuleFactoryOpts)\n    .then((wasmModule) => {\n      callback(new MediaInfo<TFormat>(wasmModule, mergedOptions))\n    })\n    .catch((error: unknown) => {\n      if (errCallback) {\n        errCallback(error)\n      }\n    })\n}\n\nexport type { MediaInfoFactoryOptions }\nexport default mediaInfoFactory\n","import type { Track } from './MediaInfoResult'\n\n/**\n * Checks if a given object is of a specified track type.\n *\n * @template T - The type of track to check for.\n * @param thing - The object to check.\n * @param type - The track type to check against.\n * @returns A boolean indicating whether the object is of the specified track type.\n */\nfunction isTrackType<T extends Track['@type']>(\n  thing: unknown,\n  type: T\n): thing is Extract<Track, { '@type': T }> {\n  return thing !== null && typeof thing === 'object' && (thing as Track)['@type'] === type\n}\n\nexport { isTrackType }\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","chunkId","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","href","FFMessageType","getMessageID","messageID","ERROR_NOT_LOADED","ERROR_TERMINATED","FFmpeg","loaded","onmessage","data","id","type","LOAD","MOUNT","UNMOUNT","EXEC","FFPROBE","WRITE_FILE","READ_FILE","DELETE_FILE","RENAME","CREATE_DIR","LIST_DIR","DELETE_DIR","LOG","forEach","f","PROGRESS","ERROR","trans","signal","Promise","resolve","reject","postMessage","addEventListener","DOMException","once","on","event","callback","push","off","filter","load","classWorkerURL","config","Worker","URL","undefined","exec","args","timeout","ffprobe","terminate","ids","keys","writeFile","path","Uint8Array","buffer","mount","fsType","options","mountPoint","unmount","readFile","encoding","deleteFile","rename","oldPath","newPath","createDir","listDir","deleteDir","FFFSType","unknownToError","error","isError","INT_FIELDS","FLOAT_FIELDS","MAX_UINT32_PLUS_ONE","DEFAULT_OPTIONS","coverData","chunkSize","format","full","MediaInfo","constructor","mediainfoModule","mediainfoModuleInstance","analyzeData","size","readChunk","resultCb","result","finalize","openBufferFinalize","inform","parseResultJson","offset","runReadDataLoop","fileSize","readNextChunk","continueBuffer","getChunk","dataValue","safeSize","Math","min","then","catch","openBufferContinue","seekTo","openBufferContinueGotoGet","openBufferInit","fileSizeValue","close","destroy","open_buffer_continue","seekToLow","open_buffer_continue_goto_get_lower","seekToHigh","open_buffer_continue_goto_get_upper","open_buffer_finalize","open_buffer_init","resultString","intFields","floatFields","JSON","parse","media","newMedia","_objectSpread","track","Array","isArray","newTrack","val","entries","includes","Number","parseInt","parseFloat","noopPrint","defaultLocateFile","prefix","pathname","concat","_unused","mediaInfoFactory","_options$format","arguments","errCallback","_DEFAULT_OPTIONS$opti","locateFile","mergedOptions","_objectWithoutProperties","_excluded","mediaInfoModuleFactory","print","printErr","onAbort","err","wasmModule","isTrackType","thing"],"version":3,"file":"index.8987b93d.js.map","sourceRoot":"../../video-gif-converter/"}